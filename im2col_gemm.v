//
// Generated by Bluespec Compiler, version 2023.07-15-g10e1952c (build 10e1952c)
//
// On Tue Dec  5 23:57:59 IST 2023
//
//
// Ports:
// Name                         I/O  size props
// CLK                            I     1 clock
// RST_N                          I     1 reset
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module im2col_gemm(CLK,
		   RST_N);
  input  CLK;
  input  RST_N;

  // register c2
  reg [31 : 0] c2;
  wire [31 : 0] c2$D_IN;
  wire c2$EN;

  // register ff_0
  reg [31 : 0] ff_0;
  wire [31 : 0] ff_0$D_IN;
  wire ff_0$EN;

  // register ff_1
  reg [31 : 0] ff_1;
  wire [31 : 0] ff_1$D_IN;
  wire ff_1$EN;

  // register ff_10
  reg [31 : 0] ff_10;
  wire [31 : 0] ff_10$D_IN;
  wire ff_10$EN;

  // register ff_11
  reg [31 : 0] ff_11;
  wire [31 : 0] ff_11$D_IN;
  wire ff_11$EN;

  // register ff_12
  reg [31 : 0] ff_12;
  wire [31 : 0] ff_12$D_IN;
  wire ff_12$EN;

  // register ff_13
  reg [31 : 0] ff_13;
  wire [31 : 0] ff_13$D_IN;
  wire ff_13$EN;

  // register ff_14
  reg [31 : 0] ff_14;
  wire [31 : 0] ff_14$D_IN;
  wire ff_14$EN;

  // register ff_15
  reg [31 : 0] ff_15;
  wire [31 : 0] ff_15$D_IN;
  wire ff_15$EN;

  // register ff_16
  reg [31 : 0] ff_16;
  wire [31 : 0] ff_16$D_IN;
  wire ff_16$EN;

  // register ff_17
  reg [31 : 0] ff_17;
  wire [31 : 0] ff_17$D_IN;
  wire ff_17$EN;

  // register ff_18
  reg [31 : 0] ff_18;
  wire [31 : 0] ff_18$D_IN;
  wire ff_18$EN;

  // register ff_19
  reg [31 : 0] ff_19;
  wire [31 : 0] ff_19$D_IN;
  wire ff_19$EN;

  // register ff_2
  reg [31 : 0] ff_2;
  wire [31 : 0] ff_2$D_IN;
  wire ff_2$EN;

  // register ff_20
  reg [31 : 0] ff_20;
  wire [31 : 0] ff_20$D_IN;
  wire ff_20$EN;

  // register ff_21
  reg [31 : 0] ff_21;
  wire [31 : 0] ff_21$D_IN;
  wire ff_21$EN;

  // register ff_22
  reg [31 : 0] ff_22;
  wire [31 : 0] ff_22$D_IN;
  wire ff_22$EN;

  // register ff_23
  reg [31 : 0] ff_23;
  wire [31 : 0] ff_23$D_IN;
  wire ff_23$EN;

  // register ff_24
  reg [31 : 0] ff_24;
  wire [31 : 0] ff_24$D_IN;
  wire ff_24$EN;

  // register ff_25
  reg [31 : 0] ff_25;
  wire [31 : 0] ff_25$D_IN;
  wire ff_25$EN;

  // register ff_26
  reg [31 : 0] ff_26;
  wire [31 : 0] ff_26$D_IN;
  wire ff_26$EN;

  // register ff_27
  reg [31 : 0] ff_27;
  wire [31 : 0] ff_27$D_IN;
  wire ff_27$EN;

  // register ff_28
  reg [31 : 0] ff_28;
  wire [31 : 0] ff_28$D_IN;
  wire ff_28$EN;

  // register ff_29
  reg [31 : 0] ff_29;
  wire [31 : 0] ff_29$D_IN;
  wire ff_29$EN;

  // register ff_3
  reg [31 : 0] ff_3;
  wire [31 : 0] ff_3$D_IN;
  wire ff_3$EN;

  // register ff_30
  reg [31 : 0] ff_30;
  wire [31 : 0] ff_30$D_IN;
  wire ff_30$EN;

  // register ff_31
  reg [31 : 0] ff_31;
  wire [31 : 0] ff_31$D_IN;
  wire ff_31$EN;

  // register ff_4
  reg [31 : 0] ff_4;
  wire [31 : 0] ff_4$D_IN;
  wire ff_4$EN;

  // register ff_5
  reg [31 : 0] ff_5;
  wire [31 : 0] ff_5$D_IN;
  wire ff_5$EN;

  // register ff_6
  reg [31 : 0] ff_6;
  wire [31 : 0] ff_6$D_IN;
  wire ff_6$EN;

  // register ff_7
  reg [31 : 0] ff_7;
  wire [31 : 0] ff_7$D_IN;
  wire ff_7$EN;

  // register ff_8
  reg [31 : 0] ff_8;
  wire [31 : 0] ff_8$D_IN;
  wire ff_8$EN;

  // register ff_9
  reg [31 : 0] ff_9;
  wire [31 : 0] ff_9$D_IN;
  wire ff_9$EN;

  // ports of submodule systolic
  wire [127 : 0] systolic$top_cnn_input__weight1,
		 systolic$top_cnn_input__weight2,
		 systolic$top_cnn_input__weight3,
		 systolic$top_cnn_input__weight4,
		 systolic$top_cnn_input_in1,
		 systolic$top_cnn_input_in2,
		 systolic$top_cnn_input_in3,
		 systolic$top_cnn_input_in4;
  wire systolic$EN_top_cnn_input;

  // submodule systolic
  mkmac_array systolic(.CLK(CLK),
		       .RST_N(RST_N),
		       .top_cnn_input__weight1(systolic$top_cnn_input__weight1),
		       .top_cnn_input__weight2(systolic$top_cnn_input__weight2),
		       .top_cnn_input__weight3(systolic$top_cnn_input__weight3),
		       .top_cnn_input__weight4(systolic$top_cnn_input__weight4),
		       .top_cnn_input_in1(systolic$top_cnn_input_in1),
		       .top_cnn_input_in2(systolic$top_cnn_input_in2),
		       .top_cnn_input_in3(systolic$top_cnn_input_in3),
		       .top_cnn_input_in4(systolic$top_cnn_input_in4),
		       .EN_top_cnn_input(systolic$EN_top_cnn_input),
		       .RDY_top_cnn_input());

  // register c2
  assign c2$D_IN = 32'h0 ;
  assign c2$EN = 1'b0 ;

  // register ff_0
  assign ff_0$D_IN = 32'h0 ;
  assign ff_0$EN = 1'b0 ;

  // register ff_1
  assign ff_1$D_IN = 32'h0 ;
  assign ff_1$EN = 1'b0 ;

  // register ff_10
  assign ff_10$D_IN = 32'h0 ;
  assign ff_10$EN = 1'b0 ;

  // register ff_11
  assign ff_11$D_IN = 32'h0 ;
  assign ff_11$EN = 1'b0 ;

  // register ff_12
  assign ff_12$D_IN = 32'h0 ;
  assign ff_12$EN = 1'b0 ;

  // register ff_13
  assign ff_13$D_IN = 32'h0 ;
  assign ff_13$EN = 1'b0 ;

  // register ff_14
  assign ff_14$D_IN = 32'h0 ;
  assign ff_14$EN = 1'b0 ;

  // register ff_15
  assign ff_15$D_IN = 32'h0 ;
  assign ff_15$EN = 1'b0 ;

  // register ff_16
  assign ff_16$D_IN = 32'h0 ;
  assign ff_16$EN = 1'b0 ;

  // register ff_17
  assign ff_17$D_IN = 32'h0 ;
  assign ff_17$EN = 1'b0 ;

  // register ff_18
  assign ff_18$D_IN = 32'h0 ;
  assign ff_18$EN = 1'b0 ;

  // register ff_19
  assign ff_19$D_IN = 32'h0 ;
  assign ff_19$EN = 1'b0 ;

  // register ff_2
  assign ff_2$D_IN = 32'h0 ;
  assign ff_2$EN = 1'b0 ;

  // register ff_20
  assign ff_20$D_IN = 32'h0 ;
  assign ff_20$EN = 1'b0 ;

  // register ff_21
  assign ff_21$D_IN = 32'h0 ;
  assign ff_21$EN = 1'b0 ;

  // register ff_22
  assign ff_22$D_IN = 32'h0 ;
  assign ff_22$EN = 1'b0 ;

  // register ff_23
  assign ff_23$D_IN = 32'h0 ;
  assign ff_23$EN = 1'b0 ;

  // register ff_24
  assign ff_24$D_IN = 32'h0 ;
  assign ff_24$EN = 1'b0 ;

  // register ff_25
  assign ff_25$D_IN = 32'h0 ;
  assign ff_25$EN = 1'b0 ;

  // register ff_26
  assign ff_26$D_IN = 32'h0 ;
  assign ff_26$EN = 1'b0 ;

  // register ff_27
  assign ff_27$D_IN = 32'h0 ;
  assign ff_27$EN = 1'b0 ;

  // register ff_28
  assign ff_28$D_IN = 32'h0 ;
  assign ff_28$EN = 1'b0 ;

  // register ff_29
  assign ff_29$D_IN = 32'h0 ;
  assign ff_29$EN = 1'b0 ;

  // register ff_3
  assign ff_3$D_IN = 32'h0 ;
  assign ff_3$EN = 1'b0 ;

  // register ff_30
  assign ff_30$D_IN = 32'h0 ;
  assign ff_30$EN = 1'b0 ;

  // register ff_31
  assign ff_31$D_IN = 32'h0 ;
  assign ff_31$EN = 1'b0 ;

  // register ff_4
  assign ff_4$D_IN = 32'h0 ;
  assign ff_4$EN = 1'b0 ;

  // register ff_5
  assign ff_5$D_IN = 32'h0 ;
  assign ff_5$EN = 1'b0 ;

  // register ff_6
  assign ff_6$D_IN = 32'h0 ;
  assign ff_6$EN = 1'b0 ;

  // register ff_7
  assign ff_7$D_IN = 32'h0 ;
  assign ff_7$EN = 1'b0 ;

  // register ff_8
  assign ff_8$D_IN = 32'h0 ;
  assign ff_8$EN = 1'b0 ;

  // register ff_9
  assign ff_9$D_IN = 32'h0 ;
  assign ff_9$EN = 1'b0 ;

  // submodule systolic
  assign systolic$top_cnn_input__weight1 = 128'd8 ;
  assign systolic$top_cnn_input__weight2 = 128'd9 ;
  assign systolic$top_cnn_input__weight3 = 128'd4 ;
  assign systolic$top_cnn_input__weight4 = 128'd4 ;
  assign systolic$top_cnn_input_in1 = 128'h00000008000000020000000900000003 ;
  assign systolic$top_cnn_input_in2 = 128'h00000001000000080000000000000009 ;
  assign systolic$top_cnn_input_in3 = 128'h00000004000000010000000800000002 ;
  assign systolic$top_cnn_input_in4 = 128'h00000008000000040000000100000008 ;
  assign systolic$EN_top_cnn_input = 1'd1 ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        c2 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	ff_0 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	ff_1 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	ff_10 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	ff_11 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	ff_12 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	ff_13 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	ff_14 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	ff_15 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	ff_16 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	ff_17 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	ff_18 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	ff_19 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	ff_2 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	ff_20 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	ff_21 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	ff_22 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	ff_23 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	ff_24 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	ff_25 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	ff_26 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	ff_27 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	ff_28 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	ff_29 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	ff_3 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	ff_30 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	ff_31 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	ff_4 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	ff_5 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	ff_6 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	ff_7 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	ff_8 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	ff_9 <= `BSV_ASSIGNMENT_DELAY 32'd0;
      end
    else
      begin
        if (c2$EN) c2 <= `BSV_ASSIGNMENT_DELAY c2$D_IN;
	if (ff_0$EN) ff_0 <= `BSV_ASSIGNMENT_DELAY ff_0$D_IN;
	if (ff_1$EN) ff_1 <= `BSV_ASSIGNMENT_DELAY ff_1$D_IN;
	if (ff_10$EN) ff_10 <= `BSV_ASSIGNMENT_DELAY ff_10$D_IN;
	if (ff_11$EN) ff_11 <= `BSV_ASSIGNMENT_DELAY ff_11$D_IN;
	if (ff_12$EN) ff_12 <= `BSV_ASSIGNMENT_DELAY ff_12$D_IN;
	if (ff_13$EN) ff_13 <= `BSV_ASSIGNMENT_DELAY ff_13$D_IN;
	if (ff_14$EN) ff_14 <= `BSV_ASSIGNMENT_DELAY ff_14$D_IN;
	if (ff_15$EN) ff_15 <= `BSV_ASSIGNMENT_DELAY ff_15$D_IN;
	if (ff_16$EN) ff_16 <= `BSV_ASSIGNMENT_DELAY ff_16$D_IN;
	if (ff_17$EN) ff_17 <= `BSV_ASSIGNMENT_DELAY ff_17$D_IN;
	if (ff_18$EN) ff_18 <= `BSV_ASSIGNMENT_DELAY ff_18$D_IN;
	if (ff_19$EN) ff_19 <= `BSV_ASSIGNMENT_DELAY ff_19$D_IN;
	if (ff_2$EN) ff_2 <= `BSV_ASSIGNMENT_DELAY ff_2$D_IN;
	if (ff_20$EN) ff_20 <= `BSV_ASSIGNMENT_DELAY ff_20$D_IN;
	if (ff_21$EN) ff_21 <= `BSV_ASSIGNMENT_DELAY ff_21$D_IN;
	if (ff_22$EN) ff_22 <= `BSV_ASSIGNMENT_DELAY ff_22$D_IN;
	if (ff_23$EN) ff_23 <= `BSV_ASSIGNMENT_DELAY ff_23$D_IN;
	if (ff_24$EN) ff_24 <= `BSV_ASSIGNMENT_DELAY ff_24$D_IN;
	if (ff_25$EN) ff_25 <= `BSV_ASSIGNMENT_DELAY ff_25$D_IN;
	if (ff_26$EN) ff_26 <= `BSV_ASSIGNMENT_DELAY ff_26$D_IN;
	if (ff_27$EN) ff_27 <= `BSV_ASSIGNMENT_DELAY ff_27$D_IN;
	if (ff_28$EN) ff_28 <= `BSV_ASSIGNMENT_DELAY ff_28$D_IN;
	if (ff_29$EN) ff_29 <= `BSV_ASSIGNMENT_DELAY ff_29$D_IN;
	if (ff_3$EN) ff_3 <= `BSV_ASSIGNMENT_DELAY ff_3$D_IN;
	if (ff_30$EN) ff_30 <= `BSV_ASSIGNMENT_DELAY ff_30$D_IN;
	if (ff_31$EN) ff_31 <= `BSV_ASSIGNMENT_DELAY ff_31$D_IN;
	if (ff_4$EN) ff_4 <= `BSV_ASSIGNMENT_DELAY ff_4$D_IN;
	if (ff_5$EN) ff_5 <= `BSV_ASSIGNMENT_DELAY ff_5$D_IN;
	if (ff_6$EN) ff_6 <= `BSV_ASSIGNMENT_DELAY ff_6$D_IN;
	if (ff_7$EN) ff_7 <= `BSV_ASSIGNMENT_DELAY ff_7$D_IN;
	if (ff_8$EN) ff_8 <= `BSV_ASSIGNMENT_DELAY ff_8$D_IN;
	if (ff_9$EN) ff_9 <= `BSV_ASSIGNMENT_DELAY ff_9$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    c2 = 32'hAAAAAAAA;
    ff_0 = 32'hAAAAAAAA;
    ff_1 = 32'hAAAAAAAA;
    ff_10 = 32'hAAAAAAAA;
    ff_11 = 32'hAAAAAAAA;
    ff_12 = 32'hAAAAAAAA;
    ff_13 = 32'hAAAAAAAA;
    ff_14 = 32'hAAAAAAAA;
    ff_15 = 32'hAAAAAAAA;
    ff_16 = 32'hAAAAAAAA;
    ff_17 = 32'hAAAAAAAA;
    ff_18 = 32'hAAAAAAAA;
    ff_19 = 32'hAAAAAAAA;
    ff_2 = 32'hAAAAAAAA;
    ff_20 = 32'hAAAAAAAA;
    ff_21 = 32'hAAAAAAAA;
    ff_22 = 32'hAAAAAAAA;
    ff_23 = 32'hAAAAAAAA;
    ff_24 = 32'hAAAAAAAA;
    ff_25 = 32'hAAAAAAAA;
    ff_26 = 32'hAAAAAAAA;
    ff_27 = 32'hAAAAAAAA;
    ff_28 = 32'hAAAAAAAA;
    ff_29 = 32'hAAAAAAAA;
    ff_3 = 32'hAAAAAAAA;
    ff_30 = 32'hAAAAAAAA;
    ff_31 = 32'hAAAAAAAA;
    ff_4 = 32'hAAAAAAAA;
    ff_5 = 32'hAAAAAAAA;
    ff_6 = 32'hAAAAAAAA;
    ff_7 = 32'hAAAAAAAA;
    ff_8 = 32'hAAAAAAAA;
    ff_9 = 32'hAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    $display("POOLING %0d %0d %0d %0d",
	     $signed((32'h2AAAAAAA >= 32'h80000007 &&
		      32'h2AAAAAAA >= 32'h8000001F &&
		      32'h2AAAAAAA >= 32'h80000041 &&
		      32'h2AAAAAAA < 32'h80000023) ?
		       32'd35 :
		       32'd65),
	     $signed(32'd46),
	     $signed(32'd49),
	     $signed(32'd64));
  end
  // synopsys translate_on
endmodule  // im2col_gemm

