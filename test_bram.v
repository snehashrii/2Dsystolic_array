//
// Generated by Bluespec Compiler, version 2023.07-15-g10e1952c (build 10e1952c)
//
// On Fri Dec  8 08:35:50 IST 2023
//
//
// Ports:
// Name                         I/O  size props
// CLK                            I     1 clock
// RST_N                          I     1 reset
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module test_bram(CLK,
		 RST_N);
  input  CLK;
  input  RST_N;

  // inlined wires
  wire dut0_serverAdapterA_outData_enqw$whas,
       dut0_serverAdapterB_outData_enqw$whas,
       dut1_serverAdapterA_outData_enqw$whas,
       dut1_serverAdapterB_outData_enqw$whas;

  // register dut0_serverAdapterA_cnt
  reg [2 : 0] dut0_serverAdapterA_cnt;
  wire [2 : 0] dut0_serverAdapterA_cnt$D_IN;
  wire dut0_serverAdapterA_cnt$EN;

  // register dut0_serverAdapterA_s1
  reg [1 : 0] dut0_serverAdapterA_s1;
  wire [1 : 0] dut0_serverAdapterA_s1$D_IN;
  wire dut0_serverAdapterA_s1$EN;

  // register dut0_serverAdapterB_cnt
  reg [2 : 0] dut0_serverAdapterB_cnt;
  wire [2 : 0] dut0_serverAdapterB_cnt$D_IN;
  wire dut0_serverAdapterB_cnt$EN;

  // register dut0_serverAdapterB_s1
  reg [1 : 0] dut0_serverAdapterB_s1;
  wire [1 : 0] dut0_serverAdapterB_s1$D_IN;
  wire dut0_serverAdapterB_s1$EN;

  // register dut1_serverAdapterA_cnt
  reg [2 : 0] dut1_serverAdapterA_cnt;
  wire [2 : 0] dut1_serverAdapterA_cnt$D_IN;
  wire dut1_serverAdapterA_cnt$EN;

  // register dut1_serverAdapterA_s1
  reg [1 : 0] dut1_serverAdapterA_s1;
  wire [1 : 0] dut1_serverAdapterA_s1$D_IN;
  wire dut1_serverAdapterA_s1$EN;

  // register dut1_serverAdapterB_cnt
  reg [2 : 0] dut1_serverAdapterB_cnt;
  wire [2 : 0] dut1_serverAdapterB_cnt$D_IN;
  wire dut1_serverAdapterB_cnt$EN;

  // register dut1_serverAdapterB_s1
  reg [1 : 0] dut1_serverAdapterB_s1;
  wire [1 : 0] dut1_serverAdapterB_s1$D_IN;
  wire dut1_serverAdapterB_s1$EN;

  // register i
  reg [31 : 0] i;
  wire [31 : 0] i$D_IN;
  wire i$EN;

  // register j
  reg [31 : 0] j;
  wire [31 : 0] j$D_IN;
  wire j$EN;

  // ports of submodule dut0_memory
  wire [11 : 0] dut0_memory$ADDRA, dut0_memory$ADDRB;
  wire [7 : 0] dut0_memory$DIA,
	       dut0_memory$DIB,
	       dut0_memory$DOA,
	       dut0_memory$DOB;
  wire dut0_memory$ENA, dut0_memory$ENB, dut0_memory$WEA, dut0_memory$WEB;

  // ports of submodule dut0_serverAdapterA_outData_beforeDeq
  wire dut0_serverAdapterA_outData_beforeDeq$D_IN,
       dut0_serverAdapterA_outData_beforeDeq$EN,
       dut0_serverAdapterA_outData_beforeDeq$Q_OUT;

  // ports of submodule dut0_serverAdapterA_outData_beforeEnq
  wire dut0_serverAdapterA_outData_beforeEnq$D_IN,
       dut0_serverAdapterA_outData_beforeEnq$EN,
       dut0_serverAdapterA_outData_beforeEnq$Q_OUT;

  // ports of submodule dut0_serverAdapterA_outData_ff
  wire [7 : 0] dut0_serverAdapterA_outData_ff$D_IN;
  wire dut0_serverAdapterA_outData_ff$CLR,
       dut0_serverAdapterA_outData_ff$DEQ,
       dut0_serverAdapterA_outData_ff$ENQ,
       dut0_serverAdapterA_outData_ff$FULL_N;

  // ports of submodule dut0_serverAdapterB_outData_beforeDeq
  wire dut0_serverAdapterB_outData_beforeDeq$D_IN,
       dut0_serverAdapterB_outData_beforeDeq$EN,
       dut0_serverAdapterB_outData_beforeDeq$Q_OUT;

  // ports of submodule dut0_serverAdapterB_outData_beforeEnq
  wire dut0_serverAdapterB_outData_beforeEnq$D_IN,
       dut0_serverAdapterB_outData_beforeEnq$EN,
       dut0_serverAdapterB_outData_beforeEnq$Q_OUT;

  // ports of submodule dut0_serverAdapterB_outData_ff
  wire [7 : 0] dut0_serverAdapterB_outData_ff$D_IN;
  wire dut0_serverAdapterB_outData_ff$CLR,
       dut0_serverAdapterB_outData_ff$DEQ,
       dut0_serverAdapterB_outData_ff$ENQ,
       dut0_serverAdapterB_outData_ff$FULL_N;

  // ports of submodule dut1_memory
  wire [11 : 0] dut1_memory$ADDRA, dut1_memory$ADDRB;
  wire [7 : 0] dut1_memory$DIA,
	       dut1_memory$DIB,
	       dut1_memory$DOA,
	       dut1_memory$DOB;
  wire dut1_memory$ENA, dut1_memory$ENB, dut1_memory$WEA, dut1_memory$WEB;

  // ports of submodule dut1_serverAdapterA_outData_beforeDeq
  wire dut1_serverAdapterA_outData_beforeDeq$D_IN,
       dut1_serverAdapterA_outData_beforeDeq$EN,
       dut1_serverAdapterA_outData_beforeDeq$Q_OUT;

  // ports of submodule dut1_serverAdapterA_outData_beforeEnq
  wire dut1_serverAdapterA_outData_beforeEnq$D_IN,
       dut1_serverAdapterA_outData_beforeEnq$EN,
       dut1_serverAdapterA_outData_beforeEnq$Q_OUT;

  // ports of submodule dut1_serverAdapterA_outData_ff
  wire [7 : 0] dut1_serverAdapterA_outData_ff$D_IN,
	       dut1_serverAdapterA_outData_ff$D_OUT;
  wire dut1_serverAdapterA_outData_ff$CLR,
       dut1_serverAdapterA_outData_ff$DEQ,
       dut1_serverAdapterA_outData_ff$EMPTY_N,
       dut1_serverAdapterA_outData_ff$ENQ,
       dut1_serverAdapterA_outData_ff$FULL_N;

  // ports of submodule dut1_serverAdapterB_outData_beforeDeq
  wire dut1_serverAdapterB_outData_beforeDeq$D_IN,
       dut1_serverAdapterB_outData_beforeDeq$EN,
       dut1_serverAdapterB_outData_beforeDeq$Q_OUT;

  // ports of submodule dut1_serverAdapterB_outData_beforeEnq
  wire dut1_serverAdapterB_outData_beforeEnq$D_IN,
       dut1_serverAdapterB_outData_beforeEnq$EN,
       dut1_serverAdapterB_outData_beforeEnq$Q_OUT;

  // ports of submodule dut1_serverAdapterB_outData_ff
  wire [7 : 0] dut1_serverAdapterB_outData_ff$D_IN;
  wire dut1_serverAdapterB_outData_ff$CLR,
       dut1_serverAdapterB_outData_ff$DEQ,
       dut1_serverAdapterB_outData_ff$ENQ,
       dut1_serverAdapterB_outData_ff$FULL_N;

  // rule scheduling signals
  wire WILL_FIRE_RL_dataout,
       WILL_FIRE_RL_dut1_serverAdapterA_stageReadResponseAlways;

  // remaining internal signals
  wire [7 : 0] v__h5921;
  wire [2 : 0] dut1_serverAdapterA_cnt_11_PLUS_IF_dut1_server_ETC___d117;

  // submodule dut0_memory
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd12),
	  .DATA_WIDTH(32'd8),
	  .MEMSIZE(13'd4096)) dut0_memory(.CLKA(CLK),
					  .CLKB(CLK),
					  .ADDRA(dut0_memory$ADDRA),
					  .ADDRB(dut0_memory$ADDRB),
					  .DIA(dut0_memory$DIA),
					  .DIB(dut0_memory$DIB),
					  .WEA(dut0_memory$WEA),
					  .WEB(dut0_memory$WEB),
					  .ENA(dut0_memory$ENA),
					  .ENB(dut0_memory$ENB),
					  .DOA(dut0_memory$DOA),
					  .DOB(dut0_memory$DOB));

  // submodule dut0_serverAdapterA_outData_beforeDeq
  RevertReg #(.width(32'd1),
	      .init(1'd1)) dut0_serverAdapterA_outData_beforeDeq(.CLK(CLK),
								 .D_IN(dut0_serverAdapterA_outData_beforeDeq$D_IN),
								 .EN(dut0_serverAdapterA_outData_beforeDeq$EN),
								 .Q_OUT(dut0_serverAdapterA_outData_beforeDeq$Q_OUT));

  // submodule dut0_serverAdapterA_outData_beforeEnq
  RevertReg #(.width(32'd1),
	      .init(1'd1)) dut0_serverAdapterA_outData_beforeEnq(.CLK(CLK),
								 .D_IN(dut0_serverAdapterA_outData_beforeEnq$D_IN),
								 .EN(dut0_serverAdapterA_outData_beforeEnq$EN),
								 .Q_OUT(dut0_serverAdapterA_outData_beforeEnq$Q_OUT));

  // submodule dut0_serverAdapterA_outData_ff
  SizedFIFO #(.p1width(32'd8),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(1'd0)) dut0_serverAdapterA_outData_ff(.RST(RST_N),
							     .CLK(CLK),
							     .D_IN(dut0_serverAdapterA_outData_ff$D_IN),
							     .ENQ(dut0_serverAdapterA_outData_ff$ENQ),
							     .DEQ(dut0_serverAdapterA_outData_ff$DEQ),
							     .CLR(dut0_serverAdapterA_outData_ff$CLR),
							     .D_OUT(),
							     .FULL_N(dut0_serverAdapterA_outData_ff$FULL_N),
							     .EMPTY_N());

  // submodule dut0_serverAdapterB_outData_beforeDeq
  RevertReg #(.width(32'd1),
	      .init(1'd1)) dut0_serverAdapterB_outData_beforeDeq(.CLK(CLK),
								 .D_IN(dut0_serverAdapterB_outData_beforeDeq$D_IN),
								 .EN(dut0_serverAdapterB_outData_beforeDeq$EN),
								 .Q_OUT(dut0_serverAdapterB_outData_beforeDeq$Q_OUT));

  // submodule dut0_serverAdapterB_outData_beforeEnq
  RevertReg #(.width(32'd1),
	      .init(1'd1)) dut0_serverAdapterB_outData_beforeEnq(.CLK(CLK),
								 .D_IN(dut0_serverAdapterB_outData_beforeEnq$D_IN),
								 .EN(dut0_serverAdapterB_outData_beforeEnq$EN),
								 .Q_OUT(dut0_serverAdapterB_outData_beforeEnq$Q_OUT));

  // submodule dut0_serverAdapterB_outData_ff
  SizedFIFO #(.p1width(32'd8),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(1'd0)) dut0_serverAdapterB_outData_ff(.RST(RST_N),
							     .CLK(CLK),
							     .D_IN(dut0_serverAdapterB_outData_ff$D_IN),
							     .ENQ(dut0_serverAdapterB_outData_ff$ENQ),
							     .DEQ(dut0_serverAdapterB_outData_ff$DEQ),
							     .CLR(dut0_serverAdapterB_outData_ff$CLR),
							     .D_OUT(),
							     .FULL_N(dut0_serverAdapterB_outData_ff$FULL_N),
							     .EMPTY_N());

  // submodule dut1_memory
  BRAM2Load #(.FILENAME("image0.txt"),
	      .PIPELINED(1'd0),
	      .ADDR_WIDTH(32'd12),
	      .DATA_WIDTH(32'd8),
	      .MEMSIZE(13'd4096),
	      .BINARY(1'd0)) dut1_memory(.CLKA(CLK),
					 .CLKB(CLK),
					 .ADDRA(dut1_memory$ADDRA),
					 .ADDRB(dut1_memory$ADDRB),
					 .DIA(dut1_memory$DIA),
					 .DIB(dut1_memory$DIB),
					 .WEA(dut1_memory$WEA),
					 .WEB(dut1_memory$WEB),
					 .ENA(dut1_memory$ENA),
					 .ENB(dut1_memory$ENB),
					 .DOA(dut1_memory$DOA),
					 .DOB(dut1_memory$DOB));

  // submodule dut1_serverAdapterA_outData_beforeDeq
  RevertReg #(.width(32'd1),
	      .init(1'd1)) dut1_serverAdapterA_outData_beforeDeq(.CLK(CLK),
								 .D_IN(dut1_serverAdapterA_outData_beforeDeq$D_IN),
								 .EN(dut1_serverAdapterA_outData_beforeDeq$EN),
								 .Q_OUT(dut1_serverAdapterA_outData_beforeDeq$Q_OUT));

  // submodule dut1_serverAdapterA_outData_beforeEnq
  RevertReg #(.width(32'd1),
	      .init(1'd1)) dut1_serverAdapterA_outData_beforeEnq(.CLK(CLK),
								 .D_IN(dut1_serverAdapterA_outData_beforeEnq$D_IN),
								 .EN(dut1_serverAdapterA_outData_beforeEnq$EN),
								 .Q_OUT(dut1_serverAdapterA_outData_beforeEnq$Q_OUT));

  // submodule dut1_serverAdapterA_outData_ff
  SizedFIFO #(.p1width(32'd8),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(1'd0)) dut1_serverAdapterA_outData_ff(.RST(RST_N),
							     .CLK(CLK),
							     .D_IN(dut1_serverAdapterA_outData_ff$D_IN),
							     .ENQ(dut1_serverAdapterA_outData_ff$ENQ),
							     .DEQ(dut1_serverAdapterA_outData_ff$DEQ),
							     .CLR(dut1_serverAdapterA_outData_ff$CLR),
							     .D_OUT(dut1_serverAdapterA_outData_ff$D_OUT),
							     .FULL_N(dut1_serverAdapterA_outData_ff$FULL_N),
							     .EMPTY_N(dut1_serverAdapterA_outData_ff$EMPTY_N));

  // submodule dut1_serverAdapterB_outData_beforeDeq
  RevertReg #(.width(32'd1),
	      .init(1'd1)) dut1_serverAdapterB_outData_beforeDeq(.CLK(CLK),
								 .D_IN(dut1_serverAdapterB_outData_beforeDeq$D_IN),
								 .EN(dut1_serverAdapterB_outData_beforeDeq$EN),
								 .Q_OUT(dut1_serverAdapterB_outData_beforeDeq$Q_OUT));

  // submodule dut1_serverAdapterB_outData_beforeEnq
  RevertReg #(.width(32'd1),
	      .init(1'd1)) dut1_serverAdapterB_outData_beforeEnq(.CLK(CLK),
								 .D_IN(dut1_serverAdapterB_outData_beforeEnq$D_IN),
								 .EN(dut1_serverAdapterB_outData_beforeEnq$EN),
								 .Q_OUT(dut1_serverAdapterB_outData_beforeEnq$Q_OUT));

  // submodule dut1_serverAdapterB_outData_ff
  SizedFIFO #(.p1width(32'd8),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(1'd0)) dut1_serverAdapterB_outData_ff(.RST(RST_N),
							     .CLK(CLK),
							     .D_IN(dut1_serverAdapterB_outData_ff$D_IN),
							     .ENQ(dut1_serverAdapterB_outData_ff$ENQ),
							     .DEQ(dut1_serverAdapterB_outData_ff$DEQ),
							     .CLR(dut1_serverAdapterB_outData_ff$CLR),
							     .D_OUT(),
							     .FULL_N(dut1_serverAdapterB_outData_ff$FULL_N),
							     .EMPTY_N());

  // rule RL_dut1_serverAdapterA_stageReadResponseAlways
  assign WILL_FIRE_RL_dut1_serverAdapterA_stageReadResponseAlways =
	     (dut1_serverAdapterA_cnt ^ 3'h4) < 3'd7 &&
	     (i ^ 32'h80000000) < 32'h80000C00 ;

  // rule RL_dataout
  assign WILL_FIRE_RL_dataout =
	     dut1_serverAdapterA_outData_beforeDeq$Q_OUT &&
	     (dut1_serverAdapterA_outData_ff$EMPTY_N ||
	      dut1_serverAdapterA_outData_enqw$whas) ;

  // inlined wires
  assign dut0_serverAdapterA_outData_enqw$whas =
	     dut0_serverAdapterA_outData_ff$FULL_N &&
	     dut0_serverAdapterA_s1[1] &&
	     dut0_serverAdapterA_s1[0] ;
  assign dut0_serverAdapterB_outData_enqw$whas =
	     dut0_serverAdapterB_outData_ff$FULL_N &&
	     dut0_serverAdapterB_s1[1] &&
	     dut0_serverAdapterB_s1[0] ;
  assign dut1_serverAdapterA_outData_enqw$whas =
	     dut1_serverAdapterA_outData_ff$FULL_N &&
	     dut1_serverAdapterA_s1[1] &&
	     dut1_serverAdapterA_s1[0] ;
  assign dut1_serverAdapterB_outData_enqw$whas =
	     dut1_serverAdapterB_outData_ff$FULL_N &&
	     dut1_serverAdapterB_s1[1] &&
	     dut1_serverAdapterB_s1[0] ;

  // register dut0_serverAdapterA_cnt
  assign dut0_serverAdapterA_cnt$D_IN =
	     dut0_serverAdapterA_cnt + 3'd0 + 3'd0 ;
  assign dut0_serverAdapterA_cnt$EN = 1'b0 ;

  // register dut0_serverAdapterA_s1
  assign dut0_serverAdapterA_s1$D_IN = 2'd0 ;
  assign dut0_serverAdapterA_s1$EN = 1'd1 ;

  // register dut0_serverAdapterB_cnt
  assign dut0_serverAdapterB_cnt$D_IN =
	     dut0_serverAdapterB_cnt + 3'd0 + 3'd0 ;
  assign dut0_serverAdapterB_cnt$EN = 1'b0 ;

  // register dut0_serverAdapterB_s1
  assign dut0_serverAdapterB_s1$D_IN = 2'd0 ;
  assign dut0_serverAdapterB_s1$EN = 1'd1 ;

  // register dut1_serverAdapterA_cnt
  assign dut1_serverAdapterA_cnt$D_IN =
	     dut1_serverAdapterA_cnt_11_PLUS_IF_dut1_server_ETC___d117 ;
  assign dut1_serverAdapterA_cnt$EN =
	     WILL_FIRE_RL_dut1_serverAdapterA_stageReadResponseAlways ||
	     WILL_FIRE_RL_dataout ;

  // register dut1_serverAdapterA_s1
  assign dut1_serverAdapterA_s1$D_IN =
	     WILL_FIRE_RL_dut1_serverAdapterA_stageReadResponseAlways ?
	       2'd3 :
	       2'd0 ;
  assign dut1_serverAdapterA_s1$EN = 1'd1 ;

  // register dut1_serverAdapterB_cnt
  assign dut1_serverAdapterB_cnt$D_IN =
	     dut1_serverAdapterB_cnt + 3'd0 + 3'd0 ;
  assign dut1_serverAdapterB_cnt$EN = 1'b0 ;

  // register dut1_serverAdapterB_s1
  assign dut1_serverAdapterB_s1$D_IN = 2'd0 ;
  assign dut1_serverAdapterB_s1$EN = 1'd1 ;

  // register i
  assign i$D_IN = i + 32'd1 ;
  assign i$EN = WILL_FIRE_RL_dut1_serverAdapterA_stageReadResponseAlways ;

  // register j
  assign j$D_IN = j + 32'd1 ;
  assign j$EN = WILL_FIRE_RL_dataout ;

  // submodule dut0_memory
  assign dut0_memory$ADDRA = 12'h0 ;
  assign dut0_memory$ADDRB = 12'h0 ;
  assign dut0_memory$DIA = 8'h0 ;
  assign dut0_memory$DIB = 8'h0 ;
  assign dut0_memory$WEA = 1'b0 ;
  assign dut0_memory$WEB = 1'b0 ;
  assign dut0_memory$ENA = 1'b0 ;
  assign dut0_memory$ENB = 1'b0 ;

  // submodule dut0_serverAdapterA_outData_beforeDeq
  assign dut0_serverAdapterA_outData_beforeDeq$D_IN = 1'b0 ;
  assign dut0_serverAdapterA_outData_beforeDeq$EN = 1'b0 ;

  // submodule dut0_serverAdapterA_outData_beforeEnq
  assign dut0_serverAdapterA_outData_beforeEnq$D_IN = 1'd1 ;
  assign dut0_serverAdapterA_outData_beforeEnq$EN =
	     dut0_serverAdapterA_outData_enqw$whas ;

  // submodule dut0_serverAdapterA_outData_ff
  assign dut0_serverAdapterA_outData_ff$D_IN = dut0_memory$DOA ;
  assign dut0_serverAdapterA_outData_ff$ENQ =
	     dut0_serverAdapterA_outData_enqw$whas ;
  assign dut0_serverAdapterA_outData_ff$DEQ = 1'b0 ;
  assign dut0_serverAdapterA_outData_ff$CLR = 1'b0 ;

  // submodule dut0_serverAdapterB_outData_beforeDeq
  assign dut0_serverAdapterB_outData_beforeDeq$D_IN = 1'b0 ;
  assign dut0_serverAdapterB_outData_beforeDeq$EN = 1'b0 ;

  // submodule dut0_serverAdapterB_outData_beforeEnq
  assign dut0_serverAdapterB_outData_beforeEnq$D_IN = 1'd1 ;
  assign dut0_serverAdapterB_outData_beforeEnq$EN =
	     dut0_serverAdapterB_outData_enqw$whas ;

  // submodule dut0_serverAdapterB_outData_ff
  assign dut0_serverAdapterB_outData_ff$D_IN = dut0_memory$DOB ;
  assign dut0_serverAdapterB_outData_ff$ENQ =
	     dut0_serverAdapterB_outData_enqw$whas ;
  assign dut0_serverAdapterB_outData_ff$DEQ = 1'b0 ;
  assign dut0_serverAdapterB_outData_ff$CLR = 1'b0 ;

  // submodule dut1_memory
  assign dut1_memory$ADDRA = i[11:0] ;
  assign dut1_memory$ADDRB = 12'h0 ;
  assign dut1_memory$DIA = 8'd0 ;
  assign dut1_memory$DIB = 8'h0 ;
  assign dut1_memory$WEA = 1'd0 ;
  assign dut1_memory$WEB = 1'b0 ;
  assign dut1_memory$ENA =
	     WILL_FIRE_RL_dut1_serverAdapterA_stageReadResponseAlways ;
  assign dut1_memory$ENB = 1'b0 ;

  // submodule dut1_serverAdapterA_outData_beforeDeq
  assign dut1_serverAdapterA_outData_beforeDeq$D_IN = 1'd1 ;
  assign dut1_serverAdapterA_outData_beforeDeq$EN = WILL_FIRE_RL_dataout ;

  // submodule dut1_serverAdapterA_outData_beforeEnq
  assign dut1_serverAdapterA_outData_beforeEnq$D_IN = 1'd1 ;
  assign dut1_serverAdapterA_outData_beforeEnq$EN =
	     dut1_serverAdapterA_outData_enqw$whas ;

  // submodule dut1_serverAdapterA_outData_ff
  assign dut1_serverAdapterA_outData_ff$D_IN = dut1_memory$DOA ;
  assign dut1_serverAdapterA_outData_ff$ENQ =
	     dut1_serverAdapterA_outData_enqw$whas &&
	     (!WILL_FIRE_RL_dataout ||
	      dut1_serverAdapterA_outData_ff$EMPTY_N) ;
  assign dut1_serverAdapterA_outData_ff$DEQ =
	     WILL_FIRE_RL_dataout && dut1_serverAdapterA_outData_ff$EMPTY_N ;
  assign dut1_serverAdapterA_outData_ff$CLR = 1'b0 ;

  // submodule dut1_serverAdapterB_outData_beforeDeq
  assign dut1_serverAdapterB_outData_beforeDeq$D_IN = 1'b0 ;
  assign dut1_serverAdapterB_outData_beforeDeq$EN = 1'b0 ;

  // submodule dut1_serverAdapterB_outData_beforeEnq
  assign dut1_serverAdapterB_outData_beforeEnq$D_IN = 1'd1 ;
  assign dut1_serverAdapterB_outData_beforeEnq$EN =
	     dut1_serverAdapterB_outData_enqw$whas ;

  // submodule dut1_serverAdapterB_outData_ff
  assign dut1_serverAdapterB_outData_ff$D_IN = dut1_memory$DOB ;
  assign dut1_serverAdapterB_outData_ff$ENQ =
	     dut1_serverAdapterB_outData_enqw$whas ;
  assign dut1_serverAdapterB_outData_ff$DEQ = 1'b0 ;
  assign dut1_serverAdapterB_outData_ff$CLR = 1'b0 ;

  // remaining internal signals
  assign dut1_serverAdapterA_cnt_11_PLUS_IF_dut1_server_ETC___d117 =
	     dut1_serverAdapterA_cnt +
	     (WILL_FIRE_RL_dut1_serverAdapterA_stageReadResponseAlways ?
		3'd1 :
		3'd0) +
	     (WILL_FIRE_RL_dataout ? 3'd7 : 3'd0) ;
  assign v__h5921 =
	     dut1_serverAdapterA_outData_ff$EMPTY_N ?
	       dut1_serverAdapterA_outData_ff$D_OUT :
	       dut1_memory$DOA ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        dut0_serverAdapterA_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	dut0_serverAdapterA_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	dut0_serverAdapterB_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	dut0_serverAdapterB_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	dut1_serverAdapterA_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	dut1_serverAdapterA_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	dut1_serverAdapterB_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	dut1_serverAdapterB_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	i <= `BSV_ASSIGNMENT_DELAY 32'd0;
	j <= `BSV_ASSIGNMENT_DELAY 32'd0;
      end
    else
      begin
        if (dut0_serverAdapterA_cnt$EN)
	  dut0_serverAdapterA_cnt <= `BSV_ASSIGNMENT_DELAY
	      dut0_serverAdapterA_cnt$D_IN;
	if (dut0_serverAdapterA_s1$EN)
	  dut0_serverAdapterA_s1 <= `BSV_ASSIGNMENT_DELAY
	      dut0_serverAdapterA_s1$D_IN;
	if (dut0_serverAdapterB_cnt$EN)
	  dut0_serverAdapterB_cnt <= `BSV_ASSIGNMENT_DELAY
	      dut0_serverAdapterB_cnt$D_IN;
	if (dut0_serverAdapterB_s1$EN)
	  dut0_serverAdapterB_s1 <= `BSV_ASSIGNMENT_DELAY
	      dut0_serverAdapterB_s1$D_IN;
	if (dut1_serverAdapterA_cnt$EN)
	  dut1_serverAdapterA_cnt <= `BSV_ASSIGNMENT_DELAY
	      dut1_serverAdapterA_cnt$D_IN;
	if (dut1_serverAdapterA_s1$EN)
	  dut1_serverAdapterA_s1 <= `BSV_ASSIGNMENT_DELAY
	      dut1_serverAdapterA_s1$D_IN;
	if (dut1_serverAdapterB_cnt$EN)
	  dut1_serverAdapterB_cnt <= `BSV_ASSIGNMENT_DELAY
	      dut1_serverAdapterB_cnt$D_IN;
	if (dut1_serverAdapterB_s1$EN)
	  dut1_serverAdapterB_s1 <= `BSV_ASSIGNMENT_DELAY
	      dut1_serverAdapterB_s1$D_IN;
	if (i$EN) i <= `BSV_ASSIGNMENT_DELAY i$D_IN;
	if (j$EN) j <= `BSV_ASSIGNMENT_DELAY j$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    dut0_serverAdapterA_cnt = 3'h2;
    dut0_serverAdapterA_s1 = 2'h2;
    dut0_serverAdapterB_cnt = 3'h2;
    dut0_serverAdapterB_s1 = 2'h2;
    dut1_serverAdapterA_cnt = 3'h2;
    dut1_serverAdapterA_s1 = 2'h2;
    dut1_serverAdapterB_cnt = 3'h2;
    dut1_serverAdapterB_s1 = 2'h2;
    i = 32'hAAAAAAAA;
    j = 32'hAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (dut0_serverAdapterA_s1[1] &&
	  (!dut0_serverAdapterA_outData_beforeEnq$Q_OUT ||
	   !dut0_serverAdapterA_outData_beforeDeq$Q_OUT ||
	   !dut0_serverAdapterA_outData_ff$FULL_N))
	$display("ERROR: %m: mkBRAMAdapter overrun");
    if (RST_N != `BSV_RESET_VALUE)
      if (dut0_serverAdapterB_s1[1] &&
	  (!dut0_serverAdapterB_outData_beforeEnq$Q_OUT ||
	   !dut0_serverAdapterB_outData_beforeDeq$Q_OUT ||
	   !dut0_serverAdapterB_outData_ff$FULL_N))
	$display("ERROR: %m: mkBRAMAdapter overrun");
    if (RST_N != `BSV_RESET_VALUE)
      if (dut1_serverAdapterA_s1[1] &&
	  (!dut1_serverAdapterA_outData_beforeEnq$Q_OUT ||
	   !dut1_serverAdapterA_outData_beforeDeq$Q_OUT ||
	   !dut1_serverAdapterA_outData_ff$FULL_N))
	$display("ERROR: %m: mkBRAMAdapter overrun");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dataout) $display("dut1read[0] = %x", v__h5921);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dataout && (j ^ 32'h80000000) >= 32'h80000BFF)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (dut1_serverAdapterB_s1[1] &&
	  (!dut1_serverAdapterB_outData_beforeEnq$Q_OUT ||
	   !dut1_serverAdapterB_outData_beforeDeq$Q_OUT ||
	   !dut1_serverAdapterB_outData_ff$FULL_N))
	$display("ERROR: %m: mkBRAMAdapter overrun");
  end
  // synopsys translate_on
endmodule  // test_bram

