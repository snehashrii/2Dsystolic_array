//
// Generated by Bluespec Compiler, version 2023.07-15-g10e1952c (build 10e1952c)
//
// On Fri Dec  8 12:49:14 IST 2023
//
//
// Ports:
// Name                         I/O  size props
// CLK                            I     1 clock
// RST_N                          I     1 reset
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module top(CLK,
	   RST_N);
  input  CLK;
  input  RST_N;

  // inlined wires
  wire dut1_serverAdapterA_outData_enqw$whas,
       dut1_serverAdapterB_outData_enqw$whas;

  // register c2
  reg [31 : 0] c2;
  wire [31 : 0] c2$D_IN;
  wire c2$EN;

  // register dut1_serverAdapterA_cnt
  reg [2 : 0] dut1_serverAdapterA_cnt;
  wire [2 : 0] dut1_serverAdapterA_cnt$D_IN;
  wire dut1_serverAdapterA_cnt$EN;

  // register dut1_serverAdapterA_s1
  reg [1 : 0] dut1_serverAdapterA_s1;
  wire [1 : 0] dut1_serverAdapterA_s1$D_IN;
  wire dut1_serverAdapterA_s1$EN;

  // register dut1_serverAdapterB_cnt
  reg [2 : 0] dut1_serverAdapterB_cnt;
  wire [2 : 0] dut1_serverAdapterB_cnt$D_IN;
  wire dut1_serverAdapterB_cnt$EN;

  // register dut1_serverAdapterB_s1
  reg [1 : 0] dut1_serverAdapterB_s1;
  wire [1 : 0] dut1_serverAdapterB_s1$D_IN;
  wire dut1_serverAdapterB_s1$EN;

  // register ff_0
  reg [31 : 0] ff_0;
  wire [31 : 0] ff_0$D_IN;
  wire ff_0$EN;

  // register ff_1
  reg [31 : 0] ff_1;
  wire [31 : 0] ff_1$D_IN;
  wire ff_1$EN;

  // register ff_10
  reg [31 : 0] ff_10;
  wire [31 : 0] ff_10$D_IN;
  wire ff_10$EN;

  // register ff_11
  reg [31 : 0] ff_11;
  wire [31 : 0] ff_11$D_IN;
  wire ff_11$EN;

  // register ff_12
  reg [31 : 0] ff_12;
  wire [31 : 0] ff_12$D_IN;
  wire ff_12$EN;

  // register ff_13
  reg [31 : 0] ff_13;
  wire [31 : 0] ff_13$D_IN;
  wire ff_13$EN;

  // register ff_14
  reg [31 : 0] ff_14;
  wire [31 : 0] ff_14$D_IN;
  wire ff_14$EN;

  // register ff_15
  reg [31 : 0] ff_15;
  wire [31 : 0] ff_15$D_IN;
  wire ff_15$EN;

  // register ff_16
  reg [31 : 0] ff_16;
  wire [31 : 0] ff_16$D_IN;
  wire ff_16$EN;

  // register ff_17
  reg [31 : 0] ff_17;
  wire [31 : 0] ff_17$D_IN;
  wire ff_17$EN;

  // register ff_18
  reg [31 : 0] ff_18;
  wire [31 : 0] ff_18$D_IN;
  wire ff_18$EN;

  // register ff_19
  reg [31 : 0] ff_19;
  wire [31 : 0] ff_19$D_IN;
  wire ff_19$EN;

  // register ff_2
  reg [31 : 0] ff_2;
  wire [31 : 0] ff_2$D_IN;
  wire ff_2$EN;

  // register ff_20
  reg [31 : 0] ff_20;
  wire [31 : 0] ff_20$D_IN;
  wire ff_20$EN;

  // register ff_21
  reg [31 : 0] ff_21;
  wire [31 : 0] ff_21$D_IN;
  wire ff_21$EN;

  // register ff_22
  reg [31 : 0] ff_22;
  wire [31 : 0] ff_22$D_IN;
  wire ff_22$EN;

  // register ff_23
  reg [31 : 0] ff_23;
  wire [31 : 0] ff_23$D_IN;
  wire ff_23$EN;

  // register ff_24
  reg [31 : 0] ff_24;
  wire [31 : 0] ff_24$D_IN;
  wire ff_24$EN;

  // register ff_25
  reg [31 : 0] ff_25;
  wire [31 : 0] ff_25$D_IN;
  wire ff_25$EN;

  // register ff_26
  reg [31 : 0] ff_26;
  wire [31 : 0] ff_26$D_IN;
  wire ff_26$EN;

  // register ff_27
  reg [31 : 0] ff_27;
  wire [31 : 0] ff_27$D_IN;
  wire ff_27$EN;

  // register ff_28
  reg [31 : 0] ff_28;
  wire [31 : 0] ff_28$D_IN;
  wire ff_28$EN;

  // register ff_29
  reg [31 : 0] ff_29;
  wire [31 : 0] ff_29$D_IN;
  wire ff_29$EN;

  // register ff_3
  reg [31 : 0] ff_3;
  wire [31 : 0] ff_3$D_IN;
  wire ff_3$EN;

  // register ff_30
  reg [31 : 0] ff_30;
  wire [31 : 0] ff_30$D_IN;
  wire ff_30$EN;

  // register ff_31
  reg [31 : 0] ff_31;
  wire [31 : 0] ff_31$D_IN;
  wire ff_31$EN;

  // register ff_4
  reg [31 : 0] ff_4;
  wire [31 : 0] ff_4$D_IN;
  wire ff_4$EN;

  // register ff_5
  reg [31 : 0] ff_5;
  wire [31 : 0] ff_5$D_IN;
  wire ff_5$EN;

  // register ff_6
  reg [31 : 0] ff_6;
  wire [31 : 0] ff_6$D_IN;
  wire ff_6$EN;

  // register ff_7
  reg [31 : 0] ff_7;
  wire [31 : 0] ff_7$D_IN;
  wire ff_7$EN;

  // register ff_8
  reg [31 : 0] ff_8;
  wire [31 : 0] ff_8$D_IN;
  wire ff_8$EN;

  // register ff_9
  reg [31 : 0] ff_9;
  wire [31 : 0] ff_9$D_IN;
  wire ff_9$EN;

  // register i
  reg [31 : 0] i;
  wire [31 : 0] i$D_IN;
  wire i$EN;

  // register j
  reg [31 : 0] j;
  wire [31 : 0] j$D_IN;
  wire j$EN;

  // register k
  reg [31 : 0] k;
  wire [31 : 0] k$D_IN;
  wire k$EN;

  // register load_done
  reg load_done;
  wire load_done$D_IN, load_done$EN;

  // ports of submodule dut1_memory
  wire [11 : 0] dut1_memory$ADDRA, dut1_memory$ADDRB;
  wire [7 : 0] dut1_memory$DIA,
	       dut1_memory$DIB,
	       dut1_memory$DOA,
	       dut1_memory$DOB;
  wire dut1_memory$ENA, dut1_memory$ENB, dut1_memory$WEA, dut1_memory$WEB;

  // ports of submodule dut1_serverAdapterA_outData_beforeDeq
  wire dut1_serverAdapterA_outData_beforeDeq$D_IN,
       dut1_serverAdapterA_outData_beforeDeq$EN,
       dut1_serverAdapterA_outData_beforeDeq$Q_OUT;

  // ports of submodule dut1_serverAdapterA_outData_beforeEnq
  wire dut1_serverAdapterA_outData_beforeEnq$D_IN,
       dut1_serverAdapterA_outData_beforeEnq$EN,
       dut1_serverAdapterA_outData_beforeEnq$Q_OUT;

  // ports of submodule dut1_serverAdapterA_outData_ff
  wire [7 : 0] dut1_serverAdapterA_outData_ff$D_IN,
	       dut1_serverAdapterA_outData_ff$D_OUT;
  wire dut1_serverAdapterA_outData_ff$CLR,
       dut1_serverAdapterA_outData_ff$DEQ,
       dut1_serverAdapterA_outData_ff$EMPTY_N,
       dut1_serverAdapterA_outData_ff$ENQ,
       dut1_serverAdapterA_outData_ff$FULL_N;

  // ports of submodule dut1_serverAdapterB_outData_beforeDeq
  wire dut1_serverAdapterB_outData_beforeDeq$D_IN,
       dut1_serverAdapterB_outData_beforeDeq$EN,
       dut1_serverAdapterB_outData_beforeDeq$Q_OUT;

  // ports of submodule dut1_serverAdapterB_outData_beforeEnq
  wire dut1_serverAdapterB_outData_beforeEnq$D_IN,
       dut1_serverAdapterB_outData_beforeEnq$EN,
       dut1_serverAdapterB_outData_beforeEnq$Q_OUT;

  // ports of submodule dut1_serverAdapterB_outData_ff
  wire [7 : 0] dut1_serverAdapterB_outData_ff$D_IN;
  wire dut1_serverAdapterB_outData_ff$CLR,
       dut1_serverAdapterB_outData_ff$DEQ,
       dut1_serverAdapterB_outData_ff$ENQ,
       dut1_serverAdapterB_outData_ff$FULL_N;

  // ports of submodule inputdataFifo
  wire [7 : 0] inputdataFifo$D_IN;
  wire inputdataFifo$CLR,
       inputdataFifo$DEQ,
       inputdataFifo$ENQ,
       inputdataFifo$FULL_N;

  // ports of submodule systolic
  wire [127 : 0] systolic$top_cnn_input__weight1,
		 systolic$top_cnn_input__weight2,
		 systolic$top_cnn_input__weight3,
		 systolic$top_cnn_input__weight4,
		 systolic$top_cnn_input_in1,
		 systolic$top_cnn_input_in2,
		 systolic$top_cnn_input_in3,
		 systolic$top_cnn_input_in4;
  wire systolic$EN_top_cnn_input, systolic$top_cnn_input_load;

  // rule scheduling signals
  wire WILL_FIRE_RL_dataout,
       WILL_FIRE_RL_dut1_serverAdapterA_stageReadResponseAlways;

  // remaining internal signals
  wire [7 : 0] v__h5351;
  wire [2 : 0] dut1_serverAdapterA_cnt_6_PLUS_IF_dut1_serverA_ETC___d22;

  // submodule dut1_memory
  BRAM2Load #(.FILENAME("image0.txt"),
	      .PIPELINED(1'd0),
	      .ADDR_WIDTH(32'd12),
	      .DATA_WIDTH(32'd8),
	      .MEMSIZE(13'd3072),
	      .BINARY(1'd0)) dut1_memory(.CLKA(CLK),
					 .CLKB(CLK),
					 .ADDRA(dut1_memory$ADDRA),
					 .ADDRB(dut1_memory$ADDRB),
					 .DIA(dut1_memory$DIA),
					 .DIB(dut1_memory$DIB),
					 .WEA(dut1_memory$WEA),
					 .WEB(dut1_memory$WEB),
					 .ENA(dut1_memory$ENA),
					 .ENB(dut1_memory$ENB),
					 .DOA(dut1_memory$DOA),
					 .DOB(dut1_memory$DOB));

  // submodule dut1_serverAdapterA_outData_beforeDeq
  RevertReg #(.width(32'd1),
	      .init(1'd1)) dut1_serverAdapterA_outData_beforeDeq(.CLK(CLK),
								 .D_IN(dut1_serverAdapterA_outData_beforeDeq$D_IN),
								 .EN(dut1_serverAdapterA_outData_beforeDeq$EN),
								 .Q_OUT(dut1_serverAdapterA_outData_beforeDeq$Q_OUT));

  // submodule dut1_serverAdapterA_outData_beforeEnq
  RevertReg #(.width(32'd1),
	      .init(1'd1)) dut1_serverAdapterA_outData_beforeEnq(.CLK(CLK),
								 .D_IN(dut1_serverAdapterA_outData_beforeEnq$D_IN),
								 .EN(dut1_serverAdapterA_outData_beforeEnq$EN),
								 .Q_OUT(dut1_serverAdapterA_outData_beforeEnq$Q_OUT));

  // submodule dut1_serverAdapterA_outData_ff
  SizedFIFO #(.p1width(32'd8),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(1'd0)) dut1_serverAdapterA_outData_ff(.RST(RST_N),
							     .CLK(CLK),
							     .D_IN(dut1_serverAdapterA_outData_ff$D_IN),
							     .ENQ(dut1_serverAdapterA_outData_ff$ENQ),
							     .DEQ(dut1_serverAdapterA_outData_ff$DEQ),
							     .CLR(dut1_serverAdapterA_outData_ff$CLR),
							     .D_OUT(dut1_serverAdapterA_outData_ff$D_OUT),
							     .FULL_N(dut1_serverAdapterA_outData_ff$FULL_N),
							     .EMPTY_N(dut1_serverAdapterA_outData_ff$EMPTY_N));

  // submodule dut1_serverAdapterB_outData_beforeDeq
  RevertReg #(.width(32'd1),
	      .init(1'd1)) dut1_serverAdapterB_outData_beforeDeq(.CLK(CLK),
								 .D_IN(dut1_serverAdapterB_outData_beforeDeq$D_IN),
								 .EN(dut1_serverAdapterB_outData_beforeDeq$EN),
								 .Q_OUT(dut1_serverAdapterB_outData_beforeDeq$Q_OUT));

  // submodule dut1_serverAdapterB_outData_beforeEnq
  RevertReg #(.width(32'd1),
	      .init(1'd1)) dut1_serverAdapterB_outData_beforeEnq(.CLK(CLK),
								 .D_IN(dut1_serverAdapterB_outData_beforeEnq$D_IN),
								 .EN(dut1_serverAdapterB_outData_beforeEnq$EN),
								 .Q_OUT(dut1_serverAdapterB_outData_beforeEnq$Q_OUT));

  // submodule dut1_serverAdapterB_outData_ff
  SizedFIFO #(.p1width(32'd8),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(1'd0)) dut1_serverAdapterB_outData_ff(.RST(RST_N),
							     .CLK(CLK),
							     .D_IN(dut1_serverAdapterB_outData_ff$D_IN),
							     .ENQ(dut1_serverAdapterB_outData_ff$ENQ),
							     .DEQ(dut1_serverAdapterB_outData_ff$DEQ),
							     .CLR(dut1_serverAdapterB_outData_ff$CLR),
							     .D_OUT(),
							     .FULL_N(dut1_serverAdapterB_outData_ff$FULL_N),
							     .EMPTY_N());

  // submodule inputdataFifo
  SizedFIFO #(.p1width(32'd8),
	      .p2depth(32'd9),
	      .p3cntr_width(32'd3),
	      .guarded(1'd1)) inputdataFifo(.RST(RST_N),
					    .CLK(CLK),
					    .D_IN(inputdataFifo$D_IN),
					    .ENQ(inputdataFifo$ENQ),
					    .DEQ(inputdataFifo$DEQ),
					    .CLR(inputdataFifo$CLR),
					    .D_OUT(),
					    .FULL_N(inputdataFifo$FULL_N),
					    .EMPTY_N());

  // submodule systolic
  mkmac_array systolic(.CLK(CLK),
		       .RST_N(RST_N),
		       .top_cnn_input__weight1(systolic$top_cnn_input__weight1),
		       .top_cnn_input__weight2(systolic$top_cnn_input__weight2),
		       .top_cnn_input__weight3(systolic$top_cnn_input__weight3),
		       .top_cnn_input__weight4(systolic$top_cnn_input__weight4),
		       .top_cnn_input_in1(systolic$top_cnn_input_in1),
		       .top_cnn_input_in2(systolic$top_cnn_input_in2),
		       .top_cnn_input_in3(systolic$top_cnn_input_in3),
		       .top_cnn_input_in4(systolic$top_cnn_input_in4),
		       .top_cnn_input_load(systolic$top_cnn_input_load),
		       .EN_top_cnn_input(systolic$EN_top_cnn_input),
		       .RDY_top_cnn_input());

  // rule RL_dut1_serverAdapterA_stageReadResponseAlways
  assign WILL_FIRE_RL_dut1_serverAdapterA_stageReadResponseAlways =
	     (dut1_serverAdapterA_cnt ^ 3'h4) < 3'd7 &&
	     (i ^ 32'h80000000) < 32'h80000C00 ;

  // rule RL_dataout
  assign WILL_FIRE_RL_dataout =
	     dut1_serverAdapterA_outData_beforeDeq$Q_OUT &&
	     (dut1_serverAdapterA_outData_ff$EMPTY_N ||
	      dut1_serverAdapterA_outData_enqw$whas) &&
	     inputdataFifo$FULL_N ;

  // inlined wires
  assign dut1_serverAdapterA_outData_enqw$whas =
	     dut1_serverAdapterA_outData_ff$FULL_N &&
	     dut1_serverAdapterA_s1[1] &&
	     dut1_serverAdapterA_s1[0] ;
  assign dut1_serverAdapterB_outData_enqw$whas =
	     dut1_serverAdapterB_outData_ff$FULL_N &&
	     dut1_serverAdapterB_s1[1] &&
	     dut1_serverAdapterB_s1[0] ;

  // register c2
  assign c2$D_IN = 32'h0 ;
  assign c2$EN = 1'b0 ;

  // register dut1_serverAdapterA_cnt
  assign dut1_serverAdapterA_cnt$D_IN =
	     dut1_serverAdapterA_cnt_6_PLUS_IF_dut1_serverA_ETC___d22 ;
  assign dut1_serverAdapterA_cnt$EN =
	     WILL_FIRE_RL_dut1_serverAdapterA_stageReadResponseAlways ||
	     WILL_FIRE_RL_dataout ;

  // register dut1_serverAdapterA_s1
  assign dut1_serverAdapterA_s1$D_IN =
	     WILL_FIRE_RL_dut1_serverAdapterA_stageReadResponseAlways ?
	       2'd3 :
	       2'd0 ;
  assign dut1_serverAdapterA_s1$EN = 1'd1 ;

  // register dut1_serverAdapterB_cnt
  assign dut1_serverAdapterB_cnt$D_IN =
	     dut1_serverAdapterB_cnt + 3'd0 + 3'd0 ;
  assign dut1_serverAdapterB_cnt$EN = 1'b0 ;

  // register dut1_serverAdapterB_s1
  assign dut1_serverAdapterB_s1$D_IN = 2'd0 ;
  assign dut1_serverAdapterB_s1$EN = 1'd1 ;

  // register ff_0
  assign ff_0$D_IN = 32'h0 ;
  assign ff_0$EN = 1'b0 ;

  // register ff_1
  assign ff_1$D_IN = 32'h0 ;
  assign ff_1$EN = 1'b0 ;

  // register ff_10
  assign ff_10$D_IN = 32'h0 ;
  assign ff_10$EN = 1'b0 ;

  // register ff_11
  assign ff_11$D_IN = 32'h0 ;
  assign ff_11$EN = 1'b0 ;

  // register ff_12
  assign ff_12$D_IN = 32'h0 ;
  assign ff_12$EN = 1'b0 ;

  // register ff_13
  assign ff_13$D_IN = 32'h0 ;
  assign ff_13$EN = 1'b0 ;

  // register ff_14
  assign ff_14$D_IN = 32'h0 ;
  assign ff_14$EN = 1'b0 ;

  // register ff_15
  assign ff_15$D_IN = 32'h0 ;
  assign ff_15$EN = 1'b0 ;

  // register ff_16
  assign ff_16$D_IN = 32'h0 ;
  assign ff_16$EN = 1'b0 ;

  // register ff_17
  assign ff_17$D_IN = 32'h0 ;
  assign ff_17$EN = 1'b0 ;

  // register ff_18
  assign ff_18$D_IN = 32'h0 ;
  assign ff_18$EN = 1'b0 ;

  // register ff_19
  assign ff_19$D_IN = 32'h0 ;
  assign ff_19$EN = 1'b0 ;

  // register ff_2
  assign ff_2$D_IN = 32'h0 ;
  assign ff_2$EN = 1'b0 ;

  // register ff_20
  assign ff_20$D_IN = 32'h0 ;
  assign ff_20$EN = 1'b0 ;

  // register ff_21
  assign ff_21$D_IN = 32'h0 ;
  assign ff_21$EN = 1'b0 ;

  // register ff_22
  assign ff_22$D_IN = 32'h0 ;
  assign ff_22$EN = 1'b0 ;

  // register ff_23
  assign ff_23$D_IN = 32'h0 ;
  assign ff_23$EN = 1'b0 ;

  // register ff_24
  assign ff_24$D_IN = 32'h0 ;
  assign ff_24$EN = 1'b0 ;

  // register ff_25
  assign ff_25$D_IN = 32'h0 ;
  assign ff_25$EN = 1'b0 ;

  // register ff_26
  assign ff_26$D_IN = 32'h0 ;
  assign ff_26$EN = 1'b0 ;

  // register ff_27
  assign ff_27$D_IN = 32'h0 ;
  assign ff_27$EN = 1'b0 ;

  // register ff_28
  assign ff_28$D_IN = 32'h0 ;
  assign ff_28$EN = 1'b0 ;

  // register ff_29
  assign ff_29$D_IN = 32'h0 ;
  assign ff_29$EN = 1'b0 ;

  // register ff_3
  assign ff_3$D_IN = 32'h0 ;
  assign ff_3$EN = 1'b0 ;

  // register ff_30
  assign ff_30$D_IN = 32'h0 ;
  assign ff_30$EN = 1'b0 ;

  // register ff_31
  assign ff_31$D_IN = 32'h0 ;
  assign ff_31$EN = 1'b0 ;

  // register ff_4
  assign ff_4$D_IN = 32'h0 ;
  assign ff_4$EN = 1'b0 ;

  // register ff_5
  assign ff_5$D_IN = 32'h0 ;
  assign ff_5$EN = 1'b0 ;

  // register ff_6
  assign ff_6$D_IN = 32'h0 ;
  assign ff_6$EN = 1'b0 ;

  // register ff_7
  assign ff_7$D_IN = 32'h0 ;
  assign ff_7$EN = 1'b0 ;

  // register ff_8
  assign ff_8$D_IN = 32'h0 ;
  assign ff_8$EN = 1'b0 ;

  // register ff_9
  assign ff_9$D_IN = 32'h0 ;
  assign ff_9$EN = 1'b0 ;

  // register i
  assign i$D_IN = i + 32'd1 ;
  assign i$EN = WILL_FIRE_RL_dut1_serverAdapterA_stageReadResponseAlways ;

  // register j
  assign j$D_IN = j + 32'd1 ;
  assign j$EN = WILL_FIRE_RL_dataout ;

  // register k
  assign k$D_IN = k + 32'd1 ;
  assign k$EN = load_done ;

  // register load_done
  assign load_done$D_IN = 1'd1 ;
  assign load_done$EN =
	     WILL_FIRE_RL_dataout && (j ^ 32'h80000000) >= 32'h80000BFF ;

  // submodule dut1_memory
  assign dut1_memory$ADDRA = i[11:0] ;
  assign dut1_memory$ADDRB = 12'h0 ;
  assign dut1_memory$DIA = 8'd0 ;
  assign dut1_memory$DIB = 8'h0 ;
  assign dut1_memory$WEA = 1'd0 ;
  assign dut1_memory$WEB = 1'b0 ;
  assign dut1_memory$ENA =
	     WILL_FIRE_RL_dut1_serverAdapterA_stageReadResponseAlways ;
  assign dut1_memory$ENB = 1'b0 ;

  // submodule dut1_serverAdapterA_outData_beforeDeq
  assign dut1_serverAdapterA_outData_beforeDeq$D_IN = 1'd1 ;
  assign dut1_serverAdapterA_outData_beforeDeq$EN = WILL_FIRE_RL_dataout ;

  // submodule dut1_serverAdapterA_outData_beforeEnq
  assign dut1_serverAdapterA_outData_beforeEnq$D_IN = 1'd1 ;
  assign dut1_serverAdapterA_outData_beforeEnq$EN =
	     dut1_serverAdapterA_outData_enqw$whas ;

  // submodule dut1_serverAdapterA_outData_ff
  assign dut1_serverAdapterA_outData_ff$D_IN = dut1_memory$DOA ;
  assign dut1_serverAdapterA_outData_ff$ENQ =
	     dut1_serverAdapterA_outData_enqw$whas &&
	     (!WILL_FIRE_RL_dataout ||
	      dut1_serverAdapterA_outData_ff$EMPTY_N) ;
  assign dut1_serverAdapterA_outData_ff$DEQ =
	     WILL_FIRE_RL_dataout && dut1_serverAdapterA_outData_ff$EMPTY_N ;
  assign dut1_serverAdapterA_outData_ff$CLR = 1'b0 ;

  // submodule dut1_serverAdapterB_outData_beforeDeq
  assign dut1_serverAdapterB_outData_beforeDeq$D_IN = 1'b0 ;
  assign dut1_serverAdapterB_outData_beforeDeq$EN = 1'b0 ;

  // submodule dut1_serverAdapterB_outData_beforeEnq
  assign dut1_serverAdapterB_outData_beforeEnq$D_IN = 1'd1 ;
  assign dut1_serverAdapterB_outData_beforeEnq$EN =
	     dut1_serverAdapterB_outData_enqw$whas ;

  // submodule dut1_serverAdapterB_outData_ff
  assign dut1_serverAdapterB_outData_ff$D_IN = dut1_memory$DOB ;
  assign dut1_serverAdapterB_outData_ff$ENQ =
	     dut1_serverAdapterB_outData_enqw$whas ;
  assign dut1_serverAdapterB_outData_ff$DEQ = 1'b0 ;
  assign dut1_serverAdapterB_outData_ff$CLR = 1'b0 ;

  // submodule inputdataFifo
  assign inputdataFifo$D_IN = v__h5351 ;
  assign inputdataFifo$ENQ = WILL_FIRE_RL_dataout ;
  assign inputdataFifo$DEQ = 1'b0 ;
  assign inputdataFifo$CLR = !inputdataFifo$FULL_N ;

  // submodule systolic
  assign systolic$top_cnn_input__weight1 = 128'd8 ;
  assign systolic$top_cnn_input__weight2 = 128'd9 ;
  assign systolic$top_cnn_input__weight3 = 128'd4 ;
  assign systolic$top_cnn_input__weight4 = 128'd4 ;
  assign systolic$top_cnn_input_in1 = 128'h00000008000000020000000900000003 ;
  assign systolic$top_cnn_input_in2 = 128'h00000001000000080000000000000009 ;
  assign systolic$top_cnn_input_in3 = 128'h00000004000000010000000800000002 ;
  assign systolic$top_cnn_input_in4 = 128'h00000008000000040000000100000008 ;
  assign systolic$top_cnn_input_load = 1'd1 ;
  assign systolic$EN_top_cnn_input = load_done ;

  // remaining internal signals
  assign dut1_serverAdapterA_cnt_6_PLUS_IF_dut1_serverA_ETC___d22 =
	     dut1_serverAdapterA_cnt +
	     (WILL_FIRE_RL_dut1_serverAdapterA_stageReadResponseAlways ?
		3'd1 :
		3'd0) +
	     (WILL_FIRE_RL_dataout ? 3'd7 : 3'd0) ;
  assign v__h5351 =
	     dut1_serverAdapterA_outData_ff$EMPTY_N ?
	       dut1_serverAdapterA_outData_ff$D_OUT :
	       dut1_memory$DOA ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        c2 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	dut1_serverAdapterA_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	dut1_serverAdapterA_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	dut1_serverAdapterB_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	dut1_serverAdapterB_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	ff_0 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	ff_1 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	ff_10 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	ff_11 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	ff_12 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	ff_13 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	ff_14 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	ff_15 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	ff_16 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	ff_17 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	ff_18 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	ff_19 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	ff_2 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	ff_20 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	ff_21 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	ff_22 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	ff_23 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	ff_24 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	ff_25 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	ff_26 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	ff_27 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	ff_28 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	ff_29 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	ff_3 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	ff_30 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	ff_31 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	ff_4 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	ff_5 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	ff_6 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	ff_7 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	ff_8 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	ff_9 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	i <= `BSV_ASSIGNMENT_DELAY 32'd0;
	j <= `BSV_ASSIGNMENT_DELAY 32'd0;
	k <= `BSV_ASSIGNMENT_DELAY 32'd0;
	load_done <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (c2$EN) c2 <= `BSV_ASSIGNMENT_DELAY c2$D_IN;
	if (dut1_serverAdapterA_cnt$EN)
	  dut1_serverAdapterA_cnt <= `BSV_ASSIGNMENT_DELAY
	      dut1_serverAdapterA_cnt$D_IN;
	if (dut1_serverAdapterA_s1$EN)
	  dut1_serverAdapterA_s1 <= `BSV_ASSIGNMENT_DELAY
	      dut1_serverAdapterA_s1$D_IN;
	if (dut1_serverAdapterB_cnt$EN)
	  dut1_serverAdapterB_cnt <= `BSV_ASSIGNMENT_DELAY
	      dut1_serverAdapterB_cnt$D_IN;
	if (dut1_serverAdapterB_s1$EN)
	  dut1_serverAdapterB_s1 <= `BSV_ASSIGNMENT_DELAY
	      dut1_serverAdapterB_s1$D_IN;
	if (ff_0$EN) ff_0 <= `BSV_ASSIGNMENT_DELAY ff_0$D_IN;
	if (ff_1$EN) ff_1 <= `BSV_ASSIGNMENT_DELAY ff_1$D_IN;
	if (ff_10$EN) ff_10 <= `BSV_ASSIGNMENT_DELAY ff_10$D_IN;
	if (ff_11$EN) ff_11 <= `BSV_ASSIGNMENT_DELAY ff_11$D_IN;
	if (ff_12$EN) ff_12 <= `BSV_ASSIGNMENT_DELAY ff_12$D_IN;
	if (ff_13$EN) ff_13 <= `BSV_ASSIGNMENT_DELAY ff_13$D_IN;
	if (ff_14$EN) ff_14 <= `BSV_ASSIGNMENT_DELAY ff_14$D_IN;
	if (ff_15$EN) ff_15 <= `BSV_ASSIGNMENT_DELAY ff_15$D_IN;
	if (ff_16$EN) ff_16 <= `BSV_ASSIGNMENT_DELAY ff_16$D_IN;
	if (ff_17$EN) ff_17 <= `BSV_ASSIGNMENT_DELAY ff_17$D_IN;
	if (ff_18$EN) ff_18 <= `BSV_ASSIGNMENT_DELAY ff_18$D_IN;
	if (ff_19$EN) ff_19 <= `BSV_ASSIGNMENT_DELAY ff_19$D_IN;
	if (ff_2$EN) ff_2 <= `BSV_ASSIGNMENT_DELAY ff_2$D_IN;
	if (ff_20$EN) ff_20 <= `BSV_ASSIGNMENT_DELAY ff_20$D_IN;
	if (ff_21$EN) ff_21 <= `BSV_ASSIGNMENT_DELAY ff_21$D_IN;
	if (ff_22$EN) ff_22 <= `BSV_ASSIGNMENT_DELAY ff_22$D_IN;
	if (ff_23$EN) ff_23 <= `BSV_ASSIGNMENT_DELAY ff_23$D_IN;
	if (ff_24$EN) ff_24 <= `BSV_ASSIGNMENT_DELAY ff_24$D_IN;
	if (ff_25$EN) ff_25 <= `BSV_ASSIGNMENT_DELAY ff_25$D_IN;
	if (ff_26$EN) ff_26 <= `BSV_ASSIGNMENT_DELAY ff_26$D_IN;
	if (ff_27$EN) ff_27 <= `BSV_ASSIGNMENT_DELAY ff_27$D_IN;
	if (ff_28$EN) ff_28 <= `BSV_ASSIGNMENT_DELAY ff_28$D_IN;
	if (ff_29$EN) ff_29 <= `BSV_ASSIGNMENT_DELAY ff_29$D_IN;
	if (ff_3$EN) ff_3 <= `BSV_ASSIGNMENT_DELAY ff_3$D_IN;
	if (ff_30$EN) ff_30 <= `BSV_ASSIGNMENT_DELAY ff_30$D_IN;
	if (ff_31$EN) ff_31 <= `BSV_ASSIGNMENT_DELAY ff_31$D_IN;
	if (ff_4$EN) ff_4 <= `BSV_ASSIGNMENT_DELAY ff_4$D_IN;
	if (ff_5$EN) ff_5 <= `BSV_ASSIGNMENT_DELAY ff_5$D_IN;
	if (ff_6$EN) ff_6 <= `BSV_ASSIGNMENT_DELAY ff_6$D_IN;
	if (ff_7$EN) ff_7 <= `BSV_ASSIGNMENT_DELAY ff_7$D_IN;
	if (ff_8$EN) ff_8 <= `BSV_ASSIGNMENT_DELAY ff_8$D_IN;
	if (ff_9$EN) ff_9 <= `BSV_ASSIGNMENT_DELAY ff_9$D_IN;
	if (i$EN) i <= `BSV_ASSIGNMENT_DELAY i$D_IN;
	if (j$EN) j <= `BSV_ASSIGNMENT_DELAY j$D_IN;
	if (k$EN) k <= `BSV_ASSIGNMENT_DELAY k$D_IN;
	if (load_done$EN) load_done <= `BSV_ASSIGNMENT_DELAY load_done$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    c2 = 32'hAAAAAAAA;
    dut1_serverAdapterA_cnt = 3'h2;
    dut1_serverAdapterA_s1 = 2'h2;
    dut1_serverAdapterB_cnt = 3'h2;
    dut1_serverAdapterB_s1 = 2'h2;
    ff_0 = 32'hAAAAAAAA;
    ff_1 = 32'hAAAAAAAA;
    ff_10 = 32'hAAAAAAAA;
    ff_11 = 32'hAAAAAAAA;
    ff_12 = 32'hAAAAAAAA;
    ff_13 = 32'hAAAAAAAA;
    ff_14 = 32'hAAAAAAAA;
    ff_15 = 32'hAAAAAAAA;
    ff_16 = 32'hAAAAAAAA;
    ff_17 = 32'hAAAAAAAA;
    ff_18 = 32'hAAAAAAAA;
    ff_19 = 32'hAAAAAAAA;
    ff_2 = 32'hAAAAAAAA;
    ff_20 = 32'hAAAAAAAA;
    ff_21 = 32'hAAAAAAAA;
    ff_22 = 32'hAAAAAAAA;
    ff_23 = 32'hAAAAAAAA;
    ff_24 = 32'hAAAAAAAA;
    ff_25 = 32'hAAAAAAAA;
    ff_26 = 32'hAAAAAAAA;
    ff_27 = 32'hAAAAAAAA;
    ff_28 = 32'hAAAAAAAA;
    ff_29 = 32'hAAAAAAAA;
    ff_3 = 32'hAAAAAAAA;
    ff_30 = 32'hAAAAAAAA;
    ff_31 = 32'hAAAAAAAA;
    ff_4 = 32'hAAAAAAAA;
    ff_5 = 32'hAAAAAAAA;
    ff_6 = 32'hAAAAAAAA;
    ff_7 = 32'hAAAAAAAA;
    ff_8 = 32'hAAAAAAAA;
    ff_9 = 32'hAAAAAAAA;
    i = 32'hAAAAAAAA;
    j = 32'hAAAAAAAA;
    k = 32'hAAAAAAAA;
    load_done = 1'h0;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (load_done && (k ^ 32'h80000000) > 32'h80000011) $finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (dut1_serverAdapterA_s1[1] &&
	  (!dut1_serverAdapterA_outData_beforeEnq$Q_OUT ||
	   !dut1_serverAdapterA_outData_beforeDeq$Q_OUT ||
	   !dut1_serverAdapterA_outData_ff$FULL_N))
	$display("ERROR: %m: mkBRAMAdapter overrun");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dataout)
	$display("%0d dut1read[0] = %x : loading ... %0d",
		 $signed(j),
		 v__h5351,
		 load_done);
    if (RST_N != `BSV_RESET_VALUE)
      if (dut1_serverAdapterB_s1[1] &&
	  (!dut1_serverAdapterB_outData_beforeEnq$Q_OUT ||
	   !dut1_serverAdapterB_outData_beforeDeq$Q_OUT ||
	   !dut1_serverAdapterB_outData_ff$FULL_N))
	$display("ERROR: %m: mkBRAMAdapter overrun");
  end
  // synopsys translate_on
endmodule  // top

