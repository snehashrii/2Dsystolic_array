//
// Generated by Bluespec Compiler, version 2023.07-15-g10e1952c (build 10e1952c)
//
// On Sat Nov 18 11:31:41 PST 2023
//
//
// Ports:
// Name                         I/O  size props
// RDY_top_cnn_input              O     1 const
// CLK                            I     1 clock
// RST_N                          I     1 reset
// top_cnn_input__weight1         I   128 reg
// top_cnn_input__weight2         I   128 reg
// top_cnn_input__weight3         I   128 reg
// top_cnn_input__weight4         I   128 reg
// top_cnn_input_in1              I   128 reg
// top_cnn_input_in2              I   128 reg
// top_cnn_input_in3              I   128 reg
// top_cnn_input_in4              I   128 reg
// EN_top_cnn_input               I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkmac_array(CLK,
		   RST_N,

		   top_cnn_input__weight1,
		   top_cnn_input__weight2,
		   top_cnn_input__weight3,
		   top_cnn_input__weight4,
		   top_cnn_input_in1,
		   top_cnn_input_in2,
		   top_cnn_input_in3,
		   top_cnn_input_in4,
		   EN_top_cnn_input,
		   RDY_top_cnn_input);
  input  CLK;
  input  RST_N;

  // action method top_cnn_input
  input  [127 : 0] top_cnn_input__weight1;
  input  [127 : 0] top_cnn_input__weight2;
  input  [127 : 0] top_cnn_input__weight3;
  input  [127 : 0] top_cnn_input__weight4;
  input  [127 : 0] top_cnn_input_in1;
  input  [127 : 0] top_cnn_input_in2;
  input  [127 : 0] top_cnn_input_in3;
  input  [127 : 0] top_cnn_input_in4;
  input  EN_top_cnn_input;
  output RDY_top_cnn_input;

  // signals for module outputs
  wire RDY_top_cnn_input;

  // register _unnamed__0
  reg [31 : 0] _unnamed__0;
  wire [31 : 0] _unnamed__0$D_IN;
  wire _unnamed__0$EN;

  // register _unnamed__0_1
  reg [31 : 0] _unnamed__0_1;
  wire [31 : 0] _unnamed__0_1$D_IN;
  wire _unnamed__0_1$EN;

  // register _unnamed__0_2
  reg [31 : 0] _unnamed__0_2;
  wire [31 : 0] _unnamed__0_2$D_IN;
  wire _unnamed__0_2$EN;

  // register _unnamed__0_3
  reg [31 : 0] _unnamed__0_3;
  wire [31 : 0] _unnamed__0_3$D_IN;
  wire _unnamed__0_3$EN;

  // register _unnamed__1
  reg [31 : 0] _unnamed__1;
  wire [31 : 0] _unnamed__1$D_IN;
  wire _unnamed__1$EN;

  // register _unnamed__1_1
  reg [31 : 0] _unnamed__1_1;
  wire [31 : 0] _unnamed__1_1$D_IN;
  wire _unnamed__1_1$EN;

  // register _unnamed__1_2
  reg [31 : 0] _unnamed__1_2;
  wire [31 : 0] _unnamed__1_2$D_IN;
  wire _unnamed__1_2$EN;

  // register _unnamed__1_3
  reg [31 : 0] _unnamed__1_3;
  wire [31 : 0] _unnamed__1_3$D_IN;
  wire _unnamed__1_3$EN;

  // register _unnamed__2
  reg [31 : 0] _unnamed__2;
  wire [31 : 0] _unnamed__2$D_IN;
  wire _unnamed__2$EN;

  // register _unnamed__2_1
  reg [31 : 0] _unnamed__2_1;
  wire [31 : 0] _unnamed__2_1$D_IN;
  wire _unnamed__2_1$EN;

  // register _unnamed__2_2
  reg [31 : 0] _unnamed__2_2;
  wire [31 : 0] _unnamed__2_2$D_IN;
  wire _unnamed__2_2$EN;

  // register _unnamed__2_3
  reg [31 : 0] _unnamed__2_3;
  wire [31 : 0] _unnamed__2_3$D_IN;
  wire _unnamed__2_3$EN;

  // register _unnamed__3
  reg [31 : 0] _unnamed__3;
  wire [31 : 0] _unnamed__3$D_IN;
  wire _unnamed__3$EN;

  // register _unnamed__3_1
  reg [31 : 0] _unnamed__3_1;
  wire [31 : 0] _unnamed__3_1$D_IN;
  wire _unnamed__3_1$EN;

  // register _unnamed__3_2
  reg [31 : 0] _unnamed__3_2;
  wire [31 : 0] _unnamed__3_2$D_IN;
  wire _unnamed__3_2$EN;

  // register _unnamed__3_3
  reg [31 : 0] _unnamed__3_3;
  wire [31 : 0] _unnamed__3_3$D_IN;
  wire _unnamed__3_3$EN;

  // register mac_r1_0
  reg [31 : 0] mac_r1_0;
  wire [31 : 0] mac_r1_0$D_IN;
  wire mac_r1_0$EN;

  // register mac_r1_1
  reg [31 : 0] mac_r1_1;
  wire [31 : 0] mac_r1_1$D_IN;
  wire mac_r1_1$EN;

  // register mac_r1_2
  reg [31 : 0] mac_r1_2;
  wire [31 : 0] mac_r1_2$D_IN;
  wire mac_r1_2$EN;

  // register mac_r1_3
  reg [31 : 0] mac_r1_3;
  wire [31 : 0] mac_r1_3$D_IN;
  wire mac_r1_3$EN;

  // register mac_r1_a11
  reg [31 : 0] mac_r1_a11;
  wire [31 : 0] mac_r1_a11$D_IN;
  wire mac_r1_a11$EN;

  // register mac_r1_a12
  reg [31 : 0] mac_r1_a12;
  wire [31 : 0] mac_r1_a12$D_IN;
  wire mac_r1_a12$EN;

  // register mac_r1_a13
  reg [31 : 0] mac_r1_a13;
  wire [31 : 0] mac_r1_a13$D_IN;
  wire mac_r1_a13$EN;

  // register mac_r1_a14
  reg [31 : 0] mac_r1_a14;
  wire [31 : 0] mac_r1_a14$D_IN;
  wire mac_r1_a14$EN;

  // register mac_r1_cycle
  reg [31 : 0] mac_r1_cycle;
  wire [31 : 0] mac_r1_cycle$D_IN;
  wire mac_r1_cycle$EN;

  // register mac_r1_n
  reg [7 : 0] mac_r1_n;
  wire [7 : 0] mac_r1_n$D_IN;
  wire mac_r1_n$EN;

  // register mac_r1_psum_in11
  reg [31 : 0] mac_r1_psum_in11;
  wire [31 : 0] mac_r1_psum_in11$D_IN;
  wire mac_r1_psum_in11$EN;

  // register mac_r1_psum_in12
  reg [31 : 0] mac_r1_psum_in12;
  wire [31 : 0] mac_r1_psum_in12$D_IN;
  wire mac_r1_psum_in12$EN;

  // register mac_r1_psum_in13
  reg [31 : 0] mac_r1_psum_in13;
  wire [31 : 0] mac_r1_psum_in13$D_IN;
  wire mac_r1_psum_in13$EN;

  // register mac_r1_psum_in14
  reg [31 : 0] mac_r1_psum_in14;
  wire [31 : 0] mac_r1_psum_in14$D_IN;
  wire mac_r1_psum_in14$EN;

  // register mac_r1_psum_out_0
  reg [31 : 0] mac_r1_psum_out_0;
  wire [31 : 0] mac_r1_psum_out_0$D_IN;
  wire mac_r1_psum_out_0$EN;

  // register mac_r1_psum_out_1
  reg [31 : 0] mac_r1_psum_out_1;
  wire [31 : 0] mac_r1_psum_out_1$D_IN;
  wire mac_r1_psum_out_1$EN;

  // register mac_r1_psum_out_2
  reg [31 : 0] mac_r1_psum_out_2;
  wire [31 : 0] mac_r1_psum_out_2$D_IN;
  wire mac_r1_psum_out_2$EN;

  // register mac_r1_psum_out_3
  reg [31 : 0] mac_r1_psum_out_3;
  wire [31 : 0] mac_r1_psum_out_3$D_IN;
  wire mac_r1_psum_out_3$EN;

  // register mac_r1_rg_inputs_rx
  reg mac_r1_rg_inputs_rx;
  wire mac_r1_rg_inputs_rx$D_IN, mac_r1_rg_inputs_rx$EN;

  // register mac_r1_w11
  reg [31 : 0] mac_r1_w11;
  wire [31 : 0] mac_r1_w11$D_IN;
  wire mac_r1_w11$EN;

  // register mac_r1_w12
  reg [31 : 0] mac_r1_w12;
  wire [31 : 0] mac_r1_w12$D_IN;
  wire mac_r1_w12$EN;

  // register mac_r1_w13
  reg [31 : 0] mac_r1_w13;
  wire [31 : 0] mac_r1_w13$D_IN;
  wire mac_r1_w13$EN;

  // register mac_r1_w14
  reg [31 : 0] mac_r1_w14;
  wire [31 : 0] mac_r1_w14$D_IN;
  wire mac_r1_w14$EN;

  // register mac_r1_weight_0
  reg [31 : 0] mac_r1_weight_0;
  wire [31 : 0] mac_r1_weight_0$D_IN;
  wire mac_r1_weight_0$EN;

  // register mac_r1_weight_1
  reg [31 : 0] mac_r1_weight_1;
  wire [31 : 0] mac_r1_weight_1$D_IN;
  wire mac_r1_weight_1$EN;

  // register mac_r1_weight_2
  reg [31 : 0] mac_r1_weight_2;
  wire [31 : 0] mac_r1_weight_2$D_IN;
  wire mac_r1_weight_2$EN;

  // register mac_r1_weight_3
  reg [31 : 0] mac_r1_weight_3;
  wire [31 : 0] mac_r1_weight_3$D_IN;
  wire mac_r1_weight_3$EN;

  // register mac_r2_0
  reg [31 : 0] mac_r2_0;
  wire [31 : 0] mac_r2_0$D_IN;
  wire mac_r2_0$EN;

  // register mac_r2_1
  reg [31 : 0] mac_r2_1;
  wire [31 : 0] mac_r2_1$D_IN;
  wire mac_r2_1$EN;

  // register mac_r2_2
  reg [31 : 0] mac_r2_2;
  wire [31 : 0] mac_r2_2$D_IN;
  wire mac_r2_2$EN;

  // register mac_r2_3
  reg [31 : 0] mac_r2_3;
  wire [31 : 0] mac_r2_3$D_IN;
  wire mac_r2_3$EN;

  // register mac_r2_a11
  reg [31 : 0] mac_r2_a11;
  wire [31 : 0] mac_r2_a11$D_IN;
  wire mac_r2_a11$EN;

  // register mac_r2_a12
  reg [31 : 0] mac_r2_a12;
  wire [31 : 0] mac_r2_a12$D_IN;
  wire mac_r2_a12$EN;

  // register mac_r2_a13
  reg [31 : 0] mac_r2_a13;
  wire [31 : 0] mac_r2_a13$D_IN;
  wire mac_r2_a13$EN;

  // register mac_r2_a14
  reg [31 : 0] mac_r2_a14;
  wire [31 : 0] mac_r2_a14$D_IN;
  wire mac_r2_a14$EN;

  // register mac_r2_cycle
  reg [31 : 0] mac_r2_cycle;
  wire [31 : 0] mac_r2_cycle$D_IN;
  wire mac_r2_cycle$EN;

  // register mac_r2_n
  reg [7 : 0] mac_r2_n;
  wire [7 : 0] mac_r2_n$D_IN;
  wire mac_r2_n$EN;

  // register mac_r2_psum_in11
  reg [31 : 0] mac_r2_psum_in11;
  wire [31 : 0] mac_r2_psum_in11$D_IN;
  wire mac_r2_psum_in11$EN;

  // register mac_r2_psum_in12
  reg [31 : 0] mac_r2_psum_in12;
  wire [31 : 0] mac_r2_psum_in12$D_IN;
  wire mac_r2_psum_in12$EN;

  // register mac_r2_psum_in13
  reg [31 : 0] mac_r2_psum_in13;
  wire [31 : 0] mac_r2_psum_in13$D_IN;
  wire mac_r2_psum_in13$EN;

  // register mac_r2_psum_in14
  reg [31 : 0] mac_r2_psum_in14;
  wire [31 : 0] mac_r2_psum_in14$D_IN;
  wire mac_r2_psum_in14$EN;

  // register mac_r2_psum_out_0
  reg [31 : 0] mac_r2_psum_out_0;
  wire [31 : 0] mac_r2_psum_out_0$D_IN;
  wire mac_r2_psum_out_0$EN;

  // register mac_r2_psum_out_1
  reg [31 : 0] mac_r2_psum_out_1;
  wire [31 : 0] mac_r2_psum_out_1$D_IN;
  wire mac_r2_psum_out_1$EN;

  // register mac_r2_psum_out_2
  reg [31 : 0] mac_r2_psum_out_2;
  wire [31 : 0] mac_r2_psum_out_2$D_IN;
  wire mac_r2_psum_out_2$EN;

  // register mac_r2_psum_out_3
  reg [31 : 0] mac_r2_psum_out_3;
  wire [31 : 0] mac_r2_psum_out_3$D_IN;
  wire mac_r2_psum_out_3$EN;

  // register mac_r2_rg_inputs_rx
  reg mac_r2_rg_inputs_rx;
  wire mac_r2_rg_inputs_rx$D_IN, mac_r2_rg_inputs_rx$EN;

  // register mac_r2_w11
  reg [31 : 0] mac_r2_w11;
  wire [31 : 0] mac_r2_w11$D_IN;
  wire mac_r2_w11$EN;

  // register mac_r2_w12
  reg [31 : 0] mac_r2_w12;
  wire [31 : 0] mac_r2_w12$D_IN;
  wire mac_r2_w12$EN;

  // register mac_r2_w13
  reg [31 : 0] mac_r2_w13;
  wire [31 : 0] mac_r2_w13$D_IN;
  wire mac_r2_w13$EN;

  // register mac_r2_w14
  reg [31 : 0] mac_r2_w14;
  wire [31 : 0] mac_r2_w14$D_IN;
  wire mac_r2_w14$EN;

  // register mac_r2_weight_0
  reg [31 : 0] mac_r2_weight_0;
  wire [31 : 0] mac_r2_weight_0$D_IN;
  wire mac_r2_weight_0$EN;

  // register mac_r2_weight_1
  reg [31 : 0] mac_r2_weight_1;
  wire [31 : 0] mac_r2_weight_1$D_IN;
  wire mac_r2_weight_1$EN;

  // register mac_r2_weight_2
  reg [31 : 0] mac_r2_weight_2;
  wire [31 : 0] mac_r2_weight_2$D_IN;
  wire mac_r2_weight_2$EN;

  // register mac_r2_weight_3
  reg [31 : 0] mac_r2_weight_3;
  wire [31 : 0] mac_r2_weight_3$D_IN;
  wire mac_r2_weight_3$EN;

  // register mac_r3_0
  reg [31 : 0] mac_r3_0;
  wire [31 : 0] mac_r3_0$D_IN;
  wire mac_r3_0$EN;

  // register mac_r3_1
  reg [31 : 0] mac_r3_1;
  wire [31 : 0] mac_r3_1$D_IN;
  wire mac_r3_1$EN;

  // register mac_r3_2
  reg [31 : 0] mac_r3_2;
  wire [31 : 0] mac_r3_2$D_IN;
  wire mac_r3_2$EN;

  // register mac_r3_3
  reg [31 : 0] mac_r3_3;
  wire [31 : 0] mac_r3_3$D_IN;
  wire mac_r3_3$EN;

  // register mac_r3_a11
  reg [31 : 0] mac_r3_a11;
  wire [31 : 0] mac_r3_a11$D_IN;
  wire mac_r3_a11$EN;

  // register mac_r3_a12
  reg [31 : 0] mac_r3_a12;
  wire [31 : 0] mac_r3_a12$D_IN;
  wire mac_r3_a12$EN;

  // register mac_r3_a13
  reg [31 : 0] mac_r3_a13;
  wire [31 : 0] mac_r3_a13$D_IN;
  wire mac_r3_a13$EN;

  // register mac_r3_a14
  reg [31 : 0] mac_r3_a14;
  wire [31 : 0] mac_r3_a14$D_IN;
  wire mac_r3_a14$EN;

  // register mac_r3_cycle
  reg [31 : 0] mac_r3_cycle;
  wire [31 : 0] mac_r3_cycle$D_IN;
  wire mac_r3_cycle$EN;

  // register mac_r3_n
  reg [7 : 0] mac_r3_n;
  wire [7 : 0] mac_r3_n$D_IN;
  wire mac_r3_n$EN;

  // register mac_r3_psum_in11
  reg [31 : 0] mac_r3_psum_in11;
  wire [31 : 0] mac_r3_psum_in11$D_IN;
  wire mac_r3_psum_in11$EN;

  // register mac_r3_psum_in12
  reg [31 : 0] mac_r3_psum_in12;
  wire [31 : 0] mac_r3_psum_in12$D_IN;
  wire mac_r3_psum_in12$EN;

  // register mac_r3_psum_in13
  reg [31 : 0] mac_r3_psum_in13;
  wire [31 : 0] mac_r3_psum_in13$D_IN;
  wire mac_r3_psum_in13$EN;

  // register mac_r3_psum_in14
  reg [31 : 0] mac_r3_psum_in14;
  wire [31 : 0] mac_r3_psum_in14$D_IN;
  wire mac_r3_psum_in14$EN;

  // register mac_r3_psum_out_0
  reg [31 : 0] mac_r3_psum_out_0;
  wire [31 : 0] mac_r3_psum_out_0$D_IN;
  wire mac_r3_psum_out_0$EN;

  // register mac_r3_psum_out_1
  reg [31 : 0] mac_r3_psum_out_1;
  wire [31 : 0] mac_r3_psum_out_1$D_IN;
  wire mac_r3_psum_out_1$EN;

  // register mac_r3_psum_out_2
  reg [31 : 0] mac_r3_psum_out_2;
  wire [31 : 0] mac_r3_psum_out_2$D_IN;
  wire mac_r3_psum_out_2$EN;

  // register mac_r3_psum_out_3
  reg [31 : 0] mac_r3_psum_out_3;
  wire [31 : 0] mac_r3_psum_out_3$D_IN;
  wire mac_r3_psum_out_3$EN;

  // register mac_r3_rg_inputs_rx
  reg mac_r3_rg_inputs_rx;
  wire mac_r3_rg_inputs_rx$D_IN, mac_r3_rg_inputs_rx$EN;

  // register mac_r3_w11
  reg [31 : 0] mac_r3_w11;
  wire [31 : 0] mac_r3_w11$D_IN;
  wire mac_r3_w11$EN;

  // register mac_r3_w12
  reg [31 : 0] mac_r3_w12;
  wire [31 : 0] mac_r3_w12$D_IN;
  wire mac_r3_w12$EN;

  // register mac_r3_w13
  reg [31 : 0] mac_r3_w13;
  wire [31 : 0] mac_r3_w13$D_IN;
  wire mac_r3_w13$EN;

  // register mac_r3_w14
  reg [31 : 0] mac_r3_w14;
  wire [31 : 0] mac_r3_w14$D_IN;
  wire mac_r3_w14$EN;

  // register mac_r3_weight_0
  reg [31 : 0] mac_r3_weight_0;
  wire [31 : 0] mac_r3_weight_0$D_IN;
  wire mac_r3_weight_0$EN;

  // register mac_r3_weight_1
  reg [31 : 0] mac_r3_weight_1;
  wire [31 : 0] mac_r3_weight_1$D_IN;
  wire mac_r3_weight_1$EN;

  // register mac_r3_weight_2
  reg [31 : 0] mac_r3_weight_2;
  wire [31 : 0] mac_r3_weight_2$D_IN;
  wire mac_r3_weight_2$EN;

  // register mac_r3_weight_3
  reg [31 : 0] mac_r3_weight_3;
  wire [31 : 0] mac_r3_weight_3$D_IN;
  wire mac_r3_weight_3$EN;

  // register mac_r4_0
  reg [31 : 0] mac_r4_0;
  wire [31 : 0] mac_r4_0$D_IN;
  wire mac_r4_0$EN;

  // register mac_r4_1
  reg [31 : 0] mac_r4_1;
  wire [31 : 0] mac_r4_1$D_IN;
  wire mac_r4_1$EN;

  // register mac_r4_2
  reg [31 : 0] mac_r4_2;
  wire [31 : 0] mac_r4_2$D_IN;
  wire mac_r4_2$EN;

  // register mac_r4_3
  reg [31 : 0] mac_r4_3;
  wire [31 : 0] mac_r4_3$D_IN;
  wire mac_r4_3$EN;

  // register mac_r4_a11
  reg [31 : 0] mac_r4_a11;
  wire [31 : 0] mac_r4_a11$D_IN;
  wire mac_r4_a11$EN;

  // register mac_r4_a12
  reg [31 : 0] mac_r4_a12;
  wire [31 : 0] mac_r4_a12$D_IN;
  wire mac_r4_a12$EN;

  // register mac_r4_a13
  reg [31 : 0] mac_r4_a13;
  wire [31 : 0] mac_r4_a13$D_IN;
  wire mac_r4_a13$EN;

  // register mac_r4_a14
  reg [31 : 0] mac_r4_a14;
  wire [31 : 0] mac_r4_a14$D_IN;
  wire mac_r4_a14$EN;

  // register mac_r4_cycle
  reg [31 : 0] mac_r4_cycle;
  wire [31 : 0] mac_r4_cycle$D_IN;
  wire mac_r4_cycle$EN;

  // register mac_r4_n
  reg [7 : 0] mac_r4_n;
  wire [7 : 0] mac_r4_n$D_IN;
  wire mac_r4_n$EN;

  // register mac_r4_psum_in11
  reg [31 : 0] mac_r4_psum_in11;
  wire [31 : 0] mac_r4_psum_in11$D_IN;
  wire mac_r4_psum_in11$EN;

  // register mac_r4_psum_in12
  reg [31 : 0] mac_r4_psum_in12;
  wire [31 : 0] mac_r4_psum_in12$D_IN;
  wire mac_r4_psum_in12$EN;

  // register mac_r4_psum_in13
  reg [31 : 0] mac_r4_psum_in13;
  wire [31 : 0] mac_r4_psum_in13$D_IN;
  wire mac_r4_psum_in13$EN;

  // register mac_r4_psum_in14
  reg [31 : 0] mac_r4_psum_in14;
  wire [31 : 0] mac_r4_psum_in14$D_IN;
  wire mac_r4_psum_in14$EN;

  // register mac_r4_psum_out_0
  reg [31 : 0] mac_r4_psum_out_0;
  wire [31 : 0] mac_r4_psum_out_0$D_IN;
  wire mac_r4_psum_out_0$EN;

  // register mac_r4_psum_out_1
  reg [31 : 0] mac_r4_psum_out_1;
  wire [31 : 0] mac_r4_psum_out_1$D_IN;
  wire mac_r4_psum_out_1$EN;

  // register mac_r4_psum_out_2
  reg [31 : 0] mac_r4_psum_out_2;
  wire [31 : 0] mac_r4_psum_out_2$D_IN;
  wire mac_r4_psum_out_2$EN;

  // register mac_r4_psum_out_3
  reg [31 : 0] mac_r4_psum_out_3;
  wire [31 : 0] mac_r4_psum_out_3$D_IN;
  wire mac_r4_psum_out_3$EN;

  // register mac_r4_rg_inputs_rx
  reg mac_r4_rg_inputs_rx;
  wire mac_r4_rg_inputs_rx$D_IN, mac_r4_rg_inputs_rx$EN;

  // register mac_r4_w11
  reg [31 : 0] mac_r4_w11;
  wire [31 : 0] mac_r4_w11$D_IN;
  wire mac_r4_w11$EN;

  // register mac_r4_w12
  reg [31 : 0] mac_r4_w12;
  wire [31 : 0] mac_r4_w12$D_IN;
  wire mac_r4_w12$EN;

  // register mac_r4_w13
  reg [31 : 0] mac_r4_w13;
  wire [31 : 0] mac_r4_w13$D_IN;
  wire mac_r4_w13$EN;

  // register mac_r4_w14
  reg [31 : 0] mac_r4_w14;
  wire [31 : 0] mac_r4_w14$D_IN;
  wire mac_r4_w14$EN;

  // register mac_r4_weight_0
  reg [31 : 0] mac_r4_weight_0;
  wire [31 : 0] mac_r4_weight_0$D_IN;
  wire mac_r4_weight_0$EN;

  // register mac_r4_weight_1
  reg [31 : 0] mac_r4_weight_1;
  wire [31 : 0] mac_r4_weight_1$D_IN;
  wire mac_r4_weight_1$EN;

  // register mac_r4_weight_2
  reg [31 : 0] mac_r4_weight_2;
  wire [31 : 0] mac_r4_weight_2$D_IN;
  wire mac_r4_weight_2$EN;

  // register mac_r4_weight_3
  reg [31 : 0] mac_r4_weight_3;
  wire [31 : 0] mac_r4_weight_3$D_IN;
  wire mac_r4_weight_3$EN;

  // register psum_in_0
  reg [31 : 0] psum_in_0;
  wire [31 : 0] psum_in_0$D_IN;
  wire psum_in_0$EN;

  // register psum_in_1
  reg [31 : 0] psum_in_1;
  wire [31 : 0] psum_in_1$D_IN;
  wire psum_in_1$EN;

  // register psum_in_2
  reg [31 : 0] psum_in_2;
  wire [31 : 0] psum_in_2$D_IN;
  wire psum_in_2$EN;

  // register psum_in_3
  reg [31 : 0] psum_in_3;
  wire [31 : 0] psum_in_3$D_IN;
  wire psum_in_3$EN;

  // register psum_out1_0
  reg [31 : 0] psum_out1_0;
  wire [31 : 0] psum_out1_0$D_IN;
  wire psum_out1_0$EN;

  // register psum_out1_1
  reg [31 : 0] psum_out1_1;
  wire [31 : 0] psum_out1_1$D_IN;
  wire psum_out1_1$EN;

  // register psum_out1_2
  reg [31 : 0] psum_out1_2;
  wire [31 : 0] psum_out1_2$D_IN;
  wire psum_out1_2$EN;

  // register psum_out1_3
  reg [31 : 0] psum_out1_3;
  wire [31 : 0] psum_out1_3$D_IN;
  wire psum_out1_3$EN;

  // register psum_out2_0
  reg [31 : 0] psum_out2_0;
  wire [31 : 0] psum_out2_0$D_IN;
  wire psum_out2_0$EN;

  // register psum_out2_1
  reg [31 : 0] psum_out2_1;
  wire [31 : 0] psum_out2_1$D_IN;
  wire psum_out2_1$EN;

  // register psum_out2_2
  reg [31 : 0] psum_out2_2;
  wire [31 : 0] psum_out2_2$D_IN;
  wire psum_out2_2$EN;

  // register psum_out2_3
  reg [31 : 0] psum_out2_3;
  wire [31 : 0] psum_out2_3$D_IN;
  wire psum_out2_3$EN;

  // register psum_out3_0
  reg [31 : 0] psum_out3_0;
  wire [31 : 0] psum_out3_0$D_IN;
  wire psum_out3_0$EN;

  // register psum_out3_1
  reg [31 : 0] psum_out3_1;
  wire [31 : 0] psum_out3_1$D_IN;
  wire psum_out3_1$EN;

  // register psum_out3_2
  reg [31 : 0] psum_out3_2;
  wire [31 : 0] psum_out3_2$D_IN;
  wire psum_out3_2$EN;

  // register psum_out3_3
  reg [31 : 0] psum_out3_3;
  wire [31 : 0] psum_out3_3$D_IN;
  wire psum_out3_3$EN;

  // register psum_out_0
  reg [31 : 0] psum_out_0;
  wire [31 : 0] psum_out_0$D_IN;
  wire psum_out_0$EN;

  // register psum_out_1
  reg [31 : 0] psum_out_1;
  wire [31 : 0] psum_out_1$D_IN;
  wire psum_out_1$EN;

  // register psum_out_2
  reg [31 : 0] psum_out_2;
  wire [31 : 0] psum_out_2$D_IN;
  wire psum_out_2$EN;

  // register psum_out_3
  reg [31 : 0] psum_out_3;
  wire [31 : 0] psum_out_3$D_IN;
  wire psum_out_3$EN;

  // register rg_psum_received
  reg rg_psum_received;
  wire rg_psum_received$D_IN, rg_psum_received$EN;

  // register weight2_0
  reg [31 : 0] weight2_0;
  wire [31 : 0] weight2_0$D_IN;
  wire weight2_0$EN;

  // register weight2_1
  reg [31 : 0] weight2_1;
  wire [31 : 0] weight2_1$D_IN;
  wire weight2_1$EN;

  // register weight2_2
  reg [31 : 0] weight2_2;
  wire [31 : 0] weight2_2$D_IN;
  wire weight2_2$EN;

  // register weight2_3
  reg [31 : 0] weight2_3;
  wire [31 : 0] weight2_3$D_IN;
  wire weight2_3$EN;

  // register weight3_0
  reg [31 : 0] weight3_0;
  wire [31 : 0] weight3_0$D_IN;
  wire weight3_0$EN;

  // register weight3_1
  reg [31 : 0] weight3_1;
  wire [31 : 0] weight3_1$D_IN;
  wire weight3_1$EN;

  // register weight3_2
  reg [31 : 0] weight3_2;
  wire [31 : 0] weight3_2$D_IN;
  wire weight3_2$EN;

  // register weight3_3
  reg [31 : 0] weight3_3;
  wire [31 : 0] weight3_3$D_IN;
  wire weight3_3$EN;

  // register weight4_0
  reg [31 : 0] weight4_0;
  wire [31 : 0] weight4_0$D_IN;
  wire weight4_0$EN;

  // register weight4_1
  reg [31 : 0] weight4_1;
  wire [31 : 0] weight4_1$D_IN;
  wire weight4_1$EN;

  // register weight4_2
  reg [31 : 0] weight4_2;
  wire [31 : 0] weight4_2$D_IN;
  wire weight4_2$EN;

  // register weight4_3
  reg [31 : 0] weight4_3;
  wire [31 : 0] weight4_3$D_IN;
  wire weight4_3$EN;

  // register weight_0
  reg [31 : 0] weight_0;
  wire [31 : 0] weight_0$D_IN;
  wire weight_0$EN;

  // register weight_1
  reg [31 : 0] weight_1;
  wire [31 : 0] weight_1$D_IN;
  wire weight_1$EN;

  // register weight_2
  reg [31 : 0] weight_2;
  wire [31 : 0] weight_2$D_IN;
  wire weight_2$EN;

  // register weight_3
  reg [31 : 0] weight_3;
  wire [31 : 0] weight_3$D_IN;
  wire weight_3$EN;

  // ports of submodule mac_r1_inputFifo
  reg [31 : 0] mac_r1_inputFifo$D_IN;
  wire [31 : 0] mac_r1_inputFifo$D_OUT;
  wire mac_r1_inputFifo$CLR,
       mac_r1_inputFifo$DEQ,
       mac_r1_inputFifo$EMPTY_N,
       mac_r1_inputFifo$ENQ,
       mac_r1_inputFifo$FULL_N;

  // ports of submodule mac_r1_mac1
  wire [31 : 0] mac_r1_mac1$mav_psumout,
		mac_r1_mac1$mav_psumout_input_data,
		mac_r1_mac1$mav_psumout_psum,
		mac_r1_mac1$mav_psumout_weight;
  wire mac_r1_mac1$EN_mav_psumout;

  // ports of submodule mac_r1_mac2
  wire [31 : 0] mac_r1_mac2$mav_psumout,
		mac_r1_mac2$mav_psumout_input_data,
		mac_r1_mac2$mav_psumout_psum,
		mac_r1_mac2$mav_psumout_weight;
  wire mac_r1_mac2$EN_mav_psumout;

  // ports of submodule mac_r1_mac3
  wire [31 : 0] mac_r1_mac3$mav_psumout,
		mac_r1_mac3$mav_psumout_input_data,
		mac_r1_mac3$mav_psumout_psum,
		mac_r1_mac3$mav_psumout_weight;
  wire mac_r1_mac3$EN_mav_psumout;

  // ports of submodule mac_r1_mac4
  wire [31 : 0] mac_r1_mac4$mav_psumout,
		mac_r1_mac4$mav_psumout_input_data,
		mac_r1_mac4$mav_psumout_psum,
		mac_r1_mac4$mav_psumout_weight;
  wire mac_r1_mac4$EN_mav_psumout;

  // ports of submodule mac_r2_inputFifo
  reg [31 : 0] mac_r2_inputFifo$D_IN;
  wire [31 : 0] mac_r2_inputFifo$D_OUT;
  wire mac_r2_inputFifo$CLR,
       mac_r2_inputFifo$DEQ,
       mac_r2_inputFifo$EMPTY_N,
       mac_r2_inputFifo$ENQ,
       mac_r2_inputFifo$FULL_N;

  // ports of submodule mac_r2_mac1
  wire [31 : 0] mac_r2_mac1$mav_psumout,
		mac_r2_mac1$mav_psumout_input_data,
		mac_r2_mac1$mav_psumout_psum,
		mac_r2_mac1$mav_psumout_weight;
  wire mac_r2_mac1$EN_mav_psumout;

  // ports of submodule mac_r2_mac2
  wire [31 : 0] mac_r2_mac2$mav_psumout,
		mac_r2_mac2$mav_psumout_input_data,
		mac_r2_mac2$mav_psumout_psum,
		mac_r2_mac2$mav_psumout_weight;
  wire mac_r2_mac2$EN_mav_psumout;

  // ports of submodule mac_r2_mac3
  wire [31 : 0] mac_r2_mac3$mav_psumout,
		mac_r2_mac3$mav_psumout_input_data,
		mac_r2_mac3$mav_psumout_psum,
		mac_r2_mac3$mav_psumout_weight;
  wire mac_r2_mac3$EN_mav_psumout;

  // ports of submodule mac_r2_mac4
  wire [31 : 0] mac_r2_mac4$mav_psumout,
		mac_r2_mac4$mav_psumout_input_data,
		mac_r2_mac4$mav_psumout_psum,
		mac_r2_mac4$mav_psumout_weight;
  wire mac_r2_mac4$EN_mav_psumout;

  // ports of submodule mac_r3_inputFifo
  reg [31 : 0] mac_r3_inputFifo$D_IN;
  wire [31 : 0] mac_r3_inputFifo$D_OUT;
  wire mac_r3_inputFifo$CLR,
       mac_r3_inputFifo$DEQ,
       mac_r3_inputFifo$EMPTY_N,
       mac_r3_inputFifo$ENQ,
       mac_r3_inputFifo$FULL_N;

  // ports of submodule mac_r3_mac1
  wire [31 : 0] mac_r3_mac1$mav_psumout,
		mac_r3_mac1$mav_psumout_input_data,
		mac_r3_mac1$mav_psumout_psum,
		mac_r3_mac1$mav_psumout_weight;
  wire mac_r3_mac1$EN_mav_psumout;

  // ports of submodule mac_r3_mac2
  wire [31 : 0] mac_r3_mac2$mav_psumout,
		mac_r3_mac2$mav_psumout_input_data,
		mac_r3_mac2$mav_psumout_psum,
		mac_r3_mac2$mav_psumout_weight;
  wire mac_r3_mac2$EN_mav_psumout;

  // ports of submodule mac_r3_mac3
  wire [31 : 0] mac_r3_mac3$mav_psumout,
		mac_r3_mac3$mav_psumout_input_data,
		mac_r3_mac3$mav_psumout_psum,
		mac_r3_mac3$mav_psumout_weight;
  wire mac_r3_mac3$EN_mav_psumout;

  // ports of submodule mac_r3_mac4
  wire [31 : 0] mac_r3_mac4$mav_psumout,
		mac_r3_mac4$mav_psumout_input_data,
		mac_r3_mac4$mav_psumout_psum,
		mac_r3_mac4$mav_psumout_weight;
  wire mac_r3_mac4$EN_mav_psumout;

  // ports of submodule mac_r4_inputFifo
  reg [31 : 0] mac_r4_inputFifo$D_IN;
  wire [31 : 0] mac_r4_inputFifo$D_OUT;
  wire mac_r4_inputFifo$CLR,
       mac_r4_inputFifo$DEQ,
       mac_r4_inputFifo$EMPTY_N,
       mac_r4_inputFifo$ENQ,
       mac_r4_inputFifo$FULL_N;

  // ports of submodule mac_r4_mac1
  wire [31 : 0] mac_r4_mac1$mav_psumout,
		mac_r4_mac1$mav_psumout_input_data,
		mac_r4_mac1$mav_psumout_psum,
		mac_r4_mac1$mav_psumout_weight;
  wire mac_r4_mac1$EN_mav_psumout;

  // ports of submodule mac_r4_mac2
  wire [31 : 0] mac_r4_mac2$mav_psumout,
		mac_r4_mac2$mav_psumout_input_data,
		mac_r4_mac2$mav_psumout_psum,
		mac_r4_mac2$mav_psumout_weight;
  wire mac_r4_mac2$EN_mav_psumout;

  // ports of submodule mac_r4_mac3
  wire [31 : 0] mac_r4_mac3$mav_psumout,
		mac_r4_mac3$mav_psumout_input_data,
		mac_r4_mac3$mav_psumout_psum,
		mac_r4_mac3$mav_psumout_weight;
  wire mac_r4_mac3$EN_mav_psumout;

  // ports of submodule mac_r4_mac4
  wire [31 : 0] mac_r4_mac4$mav_psumout,
		mac_r4_mac4$mav_psumout_input_data,
		mac_r4_mac4$mav_psumout_psum,
		mac_r4_mac4$mav_psumout_weight;
  wire mac_r4_mac4$EN_mav_psumout;

  // remaining internal signals
  wire NOT_mac_r1_psum_out_0_81_EQ_0_85_86_OR_NOT_mac_ETC___d196;

  // action method top_cnn_input
  assign RDY_top_cnn_input = 1'd1 ;

  // submodule mac_r1_inputFifo
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd32),
	      .p3cntr_width(32'd5),
	      .guarded(1'd1)) mac_r1_inputFifo(.RST(RST_N),
					       .CLK(CLK),
					       .D_IN(mac_r1_inputFifo$D_IN),
					       .ENQ(mac_r1_inputFifo$ENQ),
					       .DEQ(mac_r1_inputFifo$DEQ),
					       .CLR(mac_r1_inputFifo$CLR),
					       .D_OUT(mac_r1_inputFifo$D_OUT),
					       .FULL_N(mac_r1_inputFifo$FULL_N),
					       .EMPTY_N(mac_r1_inputFifo$EMPTY_N));

  // submodule mac_r1_mac1
  mkmac mac_r1_mac1(.CLK(CLK),
		    .RST_N(RST_N),
		    .mav_psumout_input_data(mac_r1_mac1$mav_psumout_input_data),
		    .mav_psumout_psum(mac_r1_mac1$mav_psumout_psum),
		    .mav_psumout_weight(mac_r1_mac1$mav_psumout_weight),
		    .EN_mav_psumout(mac_r1_mac1$EN_mav_psumout),
		    .mav_psumout(mac_r1_mac1$mav_psumout),
		    .RDY_mav_psumout());

  // submodule mac_r1_mac2
  mkmac mac_r1_mac2(.CLK(CLK),
		    .RST_N(RST_N),
		    .mav_psumout_input_data(mac_r1_mac2$mav_psumout_input_data),
		    .mav_psumout_psum(mac_r1_mac2$mav_psumout_psum),
		    .mav_psumout_weight(mac_r1_mac2$mav_psumout_weight),
		    .EN_mav_psumout(mac_r1_mac2$EN_mav_psumout),
		    .mav_psumout(mac_r1_mac2$mav_psumout),
		    .RDY_mav_psumout());

  // submodule mac_r1_mac3
  mkmac mac_r1_mac3(.CLK(CLK),
		    .RST_N(RST_N),
		    .mav_psumout_input_data(mac_r1_mac3$mav_psumout_input_data),
		    .mav_psumout_psum(mac_r1_mac3$mav_psumout_psum),
		    .mav_psumout_weight(mac_r1_mac3$mav_psumout_weight),
		    .EN_mav_psumout(mac_r1_mac3$EN_mav_psumout),
		    .mav_psumout(mac_r1_mac3$mav_psumout),
		    .RDY_mav_psumout());

  // submodule mac_r1_mac4
  mkmac mac_r1_mac4(.CLK(CLK),
		    .RST_N(RST_N),
		    .mav_psumout_input_data(mac_r1_mac4$mav_psumout_input_data),
		    .mav_psumout_psum(mac_r1_mac4$mav_psumout_psum),
		    .mav_psumout_weight(mac_r1_mac4$mav_psumout_weight),
		    .EN_mav_psumout(mac_r1_mac4$EN_mav_psumout),
		    .mav_psumout(mac_r1_mac4$mav_psumout),
		    .RDY_mav_psumout());

  // submodule mac_r2_inputFifo
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd32),
	      .p3cntr_width(32'd5),
	      .guarded(1'd1)) mac_r2_inputFifo(.RST(RST_N),
					       .CLK(CLK),
					       .D_IN(mac_r2_inputFifo$D_IN),
					       .ENQ(mac_r2_inputFifo$ENQ),
					       .DEQ(mac_r2_inputFifo$DEQ),
					       .CLR(mac_r2_inputFifo$CLR),
					       .D_OUT(mac_r2_inputFifo$D_OUT),
					       .FULL_N(mac_r2_inputFifo$FULL_N),
					       .EMPTY_N(mac_r2_inputFifo$EMPTY_N));

  // submodule mac_r2_mac1
  mkmac mac_r2_mac1(.CLK(CLK),
		    .RST_N(RST_N),
		    .mav_psumout_input_data(mac_r2_mac1$mav_psumout_input_data),
		    .mav_psumout_psum(mac_r2_mac1$mav_psumout_psum),
		    .mav_psumout_weight(mac_r2_mac1$mav_psumout_weight),
		    .EN_mav_psumout(mac_r2_mac1$EN_mav_psumout),
		    .mav_psumout(mac_r2_mac1$mav_psumout),
		    .RDY_mav_psumout());

  // submodule mac_r2_mac2
  mkmac mac_r2_mac2(.CLK(CLK),
		    .RST_N(RST_N),
		    .mav_psumout_input_data(mac_r2_mac2$mav_psumout_input_data),
		    .mav_psumout_psum(mac_r2_mac2$mav_psumout_psum),
		    .mav_psumout_weight(mac_r2_mac2$mav_psumout_weight),
		    .EN_mav_psumout(mac_r2_mac2$EN_mav_psumout),
		    .mav_psumout(mac_r2_mac2$mav_psumout),
		    .RDY_mav_psumout());

  // submodule mac_r2_mac3
  mkmac mac_r2_mac3(.CLK(CLK),
		    .RST_N(RST_N),
		    .mav_psumout_input_data(mac_r2_mac3$mav_psumout_input_data),
		    .mav_psumout_psum(mac_r2_mac3$mav_psumout_psum),
		    .mav_psumout_weight(mac_r2_mac3$mav_psumout_weight),
		    .EN_mav_psumout(mac_r2_mac3$EN_mav_psumout),
		    .mav_psumout(mac_r2_mac3$mav_psumout),
		    .RDY_mav_psumout());

  // submodule mac_r2_mac4
  mkmac mac_r2_mac4(.CLK(CLK),
		    .RST_N(RST_N),
		    .mav_psumout_input_data(mac_r2_mac4$mav_psumout_input_data),
		    .mav_psumout_psum(mac_r2_mac4$mav_psumout_psum),
		    .mav_psumout_weight(mac_r2_mac4$mav_psumout_weight),
		    .EN_mav_psumout(mac_r2_mac4$EN_mav_psumout),
		    .mav_psumout(mac_r2_mac4$mav_psumout),
		    .RDY_mav_psumout());

  // submodule mac_r3_inputFifo
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd32),
	      .p3cntr_width(32'd5),
	      .guarded(1'd1)) mac_r3_inputFifo(.RST(RST_N),
					       .CLK(CLK),
					       .D_IN(mac_r3_inputFifo$D_IN),
					       .ENQ(mac_r3_inputFifo$ENQ),
					       .DEQ(mac_r3_inputFifo$DEQ),
					       .CLR(mac_r3_inputFifo$CLR),
					       .D_OUT(mac_r3_inputFifo$D_OUT),
					       .FULL_N(mac_r3_inputFifo$FULL_N),
					       .EMPTY_N(mac_r3_inputFifo$EMPTY_N));

  // submodule mac_r3_mac1
  mkmac mac_r3_mac1(.CLK(CLK),
		    .RST_N(RST_N),
		    .mav_psumout_input_data(mac_r3_mac1$mav_psumout_input_data),
		    .mav_psumout_psum(mac_r3_mac1$mav_psumout_psum),
		    .mav_psumout_weight(mac_r3_mac1$mav_psumout_weight),
		    .EN_mav_psumout(mac_r3_mac1$EN_mav_psumout),
		    .mav_psumout(mac_r3_mac1$mav_psumout),
		    .RDY_mav_psumout());

  // submodule mac_r3_mac2
  mkmac mac_r3_mac2(.CLK(CLK),
		    .RST_N(RST_N),
		    .mav_psumout_input_data(mac_r3_mac2$mav_psumout_input_data),
		    .mav_psumout_psum(mac_r3_mac2$mav_psumout_psum),
		    .mav_psumout_weight(mac_r3_mac2$mav_psumout_weight),
		    .EN_mav_psumout(mac_r3_mac2$EN_mav_psumout),
		    .mav_psumout(mac_r3_mac2$mav_psumout),
		    .RDY_mav_psumout());

  // submodule mac_r3_mac3
  mkmac mac_r3_mac3(.CLK(CLK),
		    .RST_N(RST_N),
		    .mav_psumout_input_data(mac_r3_mac3$mav_psumout_input_data),
		    .mav_psumout_psum(mac_r3_mac3$mav_psumout_psum),
		    .mav_psumout_weight(mac_r3_mac3$mav_psumout_weight),
		    .EN_mav_psumout(mac_r3_mac3$EN_mav_psumout),
		    .mav_psumout(mac_r3_mac3$mav_psumout),
		    .RDY_mav_psumout());

  // submodule mac_r3_mac4
  mkmac mac_r3_mac4(.CLK(CLK),
		    .RST_N(RST_N),
		    .mav_psumout_input_data(mac_r3_mac4$mav_psumout_input_data),
		    .mav_psumout_psum(mac_r3_mac4$mav_psumout_psum),
		    .mav_psumout_weight(mac_r3_mac4$mav_psumout_weight),
		    .EN_mav_psumout(mac_r3_mac4$EN_mav_psumout),
		    .mav_psumout(mac_r3_mac4$mav_psumout),
		    .RDY_mav_psumout());

  // submodule mac_r4_inputFifo
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd32),
	      .p3cntr_width(32'd5),
	      .guarded(1'd1)) mac_r4_inputFifo(.RST(RST_N),
					       .CLK(CLK),
					       .D_IN(mac_r4_inputFifo$D_IN),
					       .ENQ(mac_r4_inputFifo$ENQ),
					       .DEQ(mac_r4_inputFifo$DEQ),
					       .CLR(mac_r4_inputFifo$CLR),
					       .D_OUT(mac_r4_inputFifo$D_OUT),
					       .FULL_N(mac_r4_inputFifo$FULL_N),
					       .EMPTY_N(mac_r4_inputFifo$EMPTY_N));

  // submodule mac_r4_mac1
  mkmac mac_r4_mac1(.CLK(CLK),
		    .RST_N(RST_N),
		    .mav_psumout_input_data(mac_r4_mac1$mav_psumout_input_data),
		    .mav_psumout_psum(mac_r4_mac1$mav_psumout_psum),
		    .mav_psumout_weight(mac_r4_mac1$mav_psumout_weight),
		    .EN_mav_psumout(mac_r4_mac1$EN_mav_psumout),
		    .mav_psumout(mac_r4_mac1$mav_psumout),
		    .RDY_mav_psumout());

  // submodule mac_r4_mac2
  mkmac mac_r4_mac2(.CLK(CLK),
		    .RST_N(RST_N),
		    .mav_psumout_input_data(mac_r4_mac2$mav_psumout_input_data),
		    .mav_psumout_psum(mac_r4_mac2$mav_psumout_psum),
		    .mav_psumout_weight(mac_r4_mac2$mav_psumout_weight),
		    .EN_mav_psumout(mac_r4_mac2$EN_mav_psumout),
		    .mav_psumout(mac_r4_mac2$mav_psumout),
		    .RDY_mav_psumout());

  // submodule mac_r4_mac3
  mkmac mac_r4_mac3(.CLK(CLK),
		    .RST_N(RST_N),
		    .mav_psumout_input_data(mac_r4_mac3$mav_psumout_input_data),
		    .mav_psumout_psum(mac_r4_mac3$mav_psumout_psum),
		    .mav_psumout_weight(mac_r4_mac3$mav_psumout_weight),
		    .EN_mav_psumout(mac_r4_mac3$EN_mav_psumout),
		    .mav_psumout(mac_r4_mac3$mav_psumout),
		    .RDY_mav_psumout());

  // submodule mac_r4_mac4
  mkmac mac_r4_mac4(.CLK(CLK),
		    .RST_N(RST_N),
		    .mav_psumout_input_data(mac_r4_mac4$mav_psumout_input_data),
		    .mav_psumout_psum(mac_r4_mac4$mav_psumout_psum),
		    .mav_psumout_weight(mac_r4_mac4$mav_psumout_weight),
		    .EN_mav_psumout(mac_r4_mac4$EN_mav_psumout),
		    .mav_psumout(mac_r4_mac4$mav_psumout),
		    .RDY_mav_psumout());

  // register _unnamed__0
  assign _unnamed__0$D_IN = top_cnn_input_in1[31:0] ;
  assign _unnamed__0$EN = EN_top_cnn_input ;

  // register _unnamed__0_1
  assign _unnamed__0_1$D_IN = top_cnn_input_in2[31:0] ;
  assign _unnamed__0_1$EN = EN_top_cnn_input ;

  // register _unnamed__0_2
  assign _unnamed__0_2$D_IN = top_cnn_input_in3[31:0] ;
  assign _unnamed__0_2$EN = EN_top_cnn_input ;

  // register _unnamed__0_3
  assign _unnamed__0_3$D_IN = top_cnn_input_in4[31:0] ;
  assign _unnamed__0_3$EN = EN_top_cnn_input ;

  // register _unnamed__1
  assign _unnamed__1$D_IN = top_cnn_input_in1[63:32] ;
  assign _unnamed__1$EN = EN_top_cnn_input ;

  // register _unnamed__1_1
  assign _unnamed__1_1$D_IN = top_cnn_input_in2[63:32] ;
  assign _unnamed__1_1$EN = EN_top_cnn_input ;

  // register _unnamed__1_2
  assign _unnamed__1_2$D_IN = top_cnn_input_in3[63:32] ;
  assign _unnamed__1_2$EN = EN_top_cnn_input ;

  // register _unnamed__1_3
  assign _unnamed__1_3$D_IN = top_cnn_input_in4[63:32] ;
  assign _unnamed__1_3$EN = EN_top_cnn_input ;

  // register _unnamed__2
  assign _unnamed__2$D_IN = top_cnn_input_in1[95:64] ;
  assign _unnamed__2$EN = EN_top_cnn_input ;

  // register _unnamed__2_1
  assign _unnamed__2_1$D_IN = top_cnn_input_in2[95:64] ;
  assign _unnamed__2_1$EN = EN_top_cnn_input ;

  // register _unnamed__2_2
  assign _unnamed__2_2$D_IN = top_cnn_input_in3[95:64] ;
  assign _unnamed__2_2$EN = EN_top_cnn_input ;

  // register _unnamed__2_3
  assign _unnamed__2_3$D_IN = top_cnn_input_in4[95:64] ;
  assign _unnamed__2_3$EN = EN_top_cnn_input ;

  // register _unnamed__3
  assign _unnamed__3$D_IN = top_cnn_input_in1[127:96] ;
  assign _unnamed__3$EN = EN_top_cnn_input ;

  // register _unnamed__3_1
  assign _unnamed__3_1$D_IN = top_cnn_input_in2[127:96] ;
  assign _unnamed__3_1$EN = EN_top_cnn_input ;

  // register _unnamed__3_2
  assign _unnamed__3_2$D_IN = top_cnn_input_in3[127:96] ;
  assign _unnamed__3_2$EN = EN_top_cnn_input ;

  // register _unnamed__3_3
  assign _unnamed__3_3$D_IN = top_cnn_input_in4[127:96] ;
  assign _unnamed__3_3$EN = EN_top_cnn_input ;

  // register mac_r1_0
  assign mac_r1_0$D_IN = _unnamed__0 ;
  assign mac_r1_0$EN = 1'd1 ;

  // register mac_r1_1
  assign mac_r1_1$D_IN = _unnamed__1 ;
  assign mac_r1_1$EN = 1'd1 ;

  // register mac_r1_2
  assign mac_r1_2$D_IN = _unnamed__2 ;
  assign mac_r1_2$EN = 1'd1 ;

  // register mac_r1_3
  assign mac_r1_3$D_IN = _unnamed__3 ;
  assign mac_r1_3$EN = 1'd1 ;

  // register mac_r1_a11
  assign mac_r1_a11$D_IN = mac_r1_inputFifo$D_OUT ;
  assign mac_r1_a11$EN = mac_r1_inputFifo$EMPTY_N && mac_r1_rg_inputs_rx ;

  // register mac_r1_a12
  assign mac_r1_a12$D_IN = mac_r1_a11 ;
  assign mac_r1_a12$EN = mac_r1_inputFifo$EMPTY_N && mac_r1_rg_inputs_rx ;

  // register mac_r1_a13
  assign mac_r1_a13$D_IN = mac_r1_a12 ;
  assign mac_r1_a13$EN = mac_r1_inputFifo$EMPTY_N && mac_r1_rg_inputs_rx ;

  // register mac_r1_a14
  assign mac_r1_a14$D_IN = mac_r1_a13 ;
  assign mac_r1_a14$EN = mac_r1_inputFifo$EMPTY_N && mac_r1_rg_inputs_rx ;

  // register mac_r1_cycle
  assign mac_r1_cycle$D_IN = mac_r1_cycle + 32'd1 ;
  assign mac_r1_cycle$EN = 1'd1 ;

  // register mac_r1_n
  assign mac_r1_n$D_IN = mac_r1_n + 8'd1 ;
  assign mac_r1_n$EN =
	     mac_r1_inputFifo$FULL_N && mac_r1_n < 8'd4 &&
	     (mac_r1_cycle ^ 32'h80000000) > 32'h80000001 ;

  // register mac_r1_psum_in11
  assign mac_r1_psum_in11$D_IN = psum_in_0 ;
  assign mac_r1_psum_in11$EN = 1'd1 ;

  // register mac_r1_psum_in12
  assign mac_r1_psum_in12$D_IN = psum_in_1 ;
  assign mac_r1_psum_in12$EN = 1'd1 ;

  // register mac_r1_psum_in13
  assign mac_r1_psum_in13$D_IN = psum_in_2 ;
  assign mac_r1_psum_in13$EN = 1'd1 ;

  // register mac_r1_psum_in14
  assign mac_r1_psum_in14$D_IN = psum_in_3 ;
  assign mac_r1_psum_in14$EN = 1'd1 ;

  // register mac_r1_psum_out_0
  assign mac_r1_psum_out_0$D_IN = mac_r1_mac1$mav_psumout ;
  assign mac_r1_psum_out_0$EN = 1'd1 ;

  // register mac_r1_psum_out_1
  assign mac_r1_psum_out_1$D_IN = mac_r1_mac2$mav_psumout ;
  assign mac_r1_psum_out_1$EN = 1'd1 ;

  // register mac_r1_psum_out_2
  assign mac_r1_psum_out_2$D_IN = mac_r1_mac3$mav_psumout ;
  assign mac_r1_psum_out_2$EN = 1'd1 ;

  // register mac_r1_psum_out_3
  assign mac_r1_psum_out_3$D_IN = mac_r1_mac4$mav_psumout ;
  assign mac_r1_psum_out_3$EN = 1'd1 ;

  // register mac_r1_rg_inputs_rx
  assign mac_r1_rg_inputs_rx$D_IN = 1'd1 ;
  assign mac_r1_rg_inputs_rx$EN = 1'd1 ;

  // register mac_r1_w11
  assign mac_r1_w11$D_IN = mac_r1_weight_0 ;
  assign mac_r1_w11$EN = 1'd1 ;

  // register mac_r1_w12
  assign mac_r1_w12$D_IN = mac_r1_weight_1 ;
  assign mac_r1_w12$EN = 1'd1 ;

  // register mac_r1_w13
  assign mac_r1_w13$D_IN = mac_r1_weight_2 ;
  assign mac_r1_w13$EN = 1'd1 ;

  // register mac_r1_w14
  assign mac_r1_w14$D_IN = mac_r1_weight_3 ;
  assign mac_r1_w14$EN = 1'd1 ;

  // register mac_r1_weight_0
  assign mac_r1_weight_0$D_IN = weight_0 ;
  assign mac_r1_weight_0$EN = 1'd1 ;

  // register mac_r1_weight_1
  assign mac_r1_weight_1$D_IN = weight_1 ;
  assign mac_r1_weight_1$EN = 1'd1 ;

  // register mac_r1_weight_2
  assign mac_r1_weight_2$D_IN = weight_2 ;
  assign mac_r1_weight_2$EN = 1'd1 ;

  // register mac_r1_weight_3
  assign mac_r1_weight_3$D_IN = weight_3 ;
  assign mac_r1_weight_3$EN = 1'd1 ;

  // register mac_r2_0
  assign mac_r2_0$D_IN = _unnamed__0_1 ;
  assign mac_r2_0$EN = 1'd1 ;

  // register mac_r2_1
  assign mac_r2_1$D_IN = _unnamed__1_1 ;
  assign mac_r2_1$EN = 1'd1 ;

  // register mac_r2_2
  assign mac_r2_2$D_IN = _unnamed__2_1 ;
  assign mac_r2_2$EN = 1'd1 ;

  // register mac_r2_3
  assign mac_r2_3$D_IN = _unnamed__3_1 ;
  assign mac_r2_3$EN = 1'd1 ;

  // register mac_r2_a11
  assign mac_r2_a11$D_IN = mac_r2_inputFifo$D_OUT ;
  assign mac_r2_a11$EN = mac_r2_inputFifo$EMPTY_N && mac_r2_rg_inputs_rx ;

  // register mac_r2_a12
  assign mac_r2_a12$D_IN = mac_r2_a11 ;
  assign mac_r2_a12$EN = mac_r2_inputFifo$EMPTY_N && mac_r2_rg_inputs_rx ;

  // register mac_r2_a13
  assign mac_r2_a13$D_IN = mac_r2_a12 ;
  assign mac_r2_a13$EN = mac_r2_inputFifo$EMPTY_N && mac_r2_rg_inputs_rx ;

  // register mac_r2_a14
  assign mac_r2_a14$D_IN = mac_r2_a13 ;
  assign mac_r2_a14$EN = mac_r2_inputFifo$EMPTY_N && mac_r2_rg_inputs_rx ;

  // register mac_r2_cycle
  assign mac_r2_cycle$D_IN = mac_r2_cycle + 32'd1 ;
  assign mac_r2_cycle$EN = 1'd1 ;

  // register mac_r2_n
  assign mac_r2_n$D_IN = mac_r2_n + 8'd1 ;
  assign mac_r2_n$EN =
	     mac_r2_inputFifo$FULL_N && mac_r2_n < 8'd4 &&
	     (mac_r2_cycle ^ 32'h80000000) > 32'h80000001 ;

  // register mac_r2_psum_in11
  assign mac_r2_psum_in11$D_IN = psum_out_0 ;
  assign mac_r2_psum_in11$EN =
	     NOT_mac_r1_psum_out_0_81_EQ_0_85_86_OR_NOT_mac_ETC___d196 ||
	     psum_out_0 != 32'd0 ;

  // register mac_r2_psum_in12
  assign mac_r2_psum_in12$D_IN = psum_out_1 ;
  assign mac_r2_psum_in12$EN =
	     NOT_mac_r1_psum_out_0_81_EQ_0_85_86_OR_NOT_mac_ETC___d196 ||
	     psum_out_0 != 32'd0 ;

  // register mac_r2_psum_in13
  assign mac_r2_psum_in13$D_IN = psum_out_2 ;
  assign mac_r2_psum_in13$EN =
	     NOT_mac_r1_psum_out_0_81_EQ_0_85_86_OR_NOT_mac_ETC___d196 ||
	     psum_out_0 != 32'd0 ;

  // register mac_r2_psum_in14
  assign mac_r2_psum_in14$D_IN = psum_out_3 ;
  assign mac_r2_psum_in14$EN =
	     NOT_mac_r1_psum_out_0_81_EQ_0_85_86_OR_NOT_mac_ETC___d196 ||
	     psum_out_0 != 32'd0 ;

  // register mac_r2_psum_out_0
  assign mac_r2_psum_out_0$D_IN = mac_r2_mac1$mav_psumout ;
  assign mac_r2_psum_out_0$EN = 1'd1 ;

  // register mac_r2_psum_out_1
  assign mac_r2_psum_out_1$D_IN = mac_r2_mac2$mav_psumout ;
  assign mac_r2_psum_out_1$EN = 1'd1 ;

  // register mac_r2_psum_out_2
  assign mac_r2_psum_out_2$D_IN = mac_r2_mac3$mav_psumout ;
  assign mac_r2_psum_out_2$EN = 1'd1 ;

  // register mac_r2_psum_out_3
  assign mac_r2_psum_out_3$D_IN = mac_r2_mac4$mav_psumout ;
  assign mac_r2_psum_out_3$EN = 1'd1 ;

  // register mac_r2_rg_inputs_rx
  assign mac_r2_rg_inputs_rx$D_IN = 1'd1 ;
  assign mac_r2_rg_inputs_rx$EN =
	     NOT_mac_r1_psum_out_0_81_EQ_0_85_86_OR_NOT_mac_ETC___d196 ||
	     psum_out_0 != 32'd0 ;

  // register mac_r2_w11
  assign mac_r2_w11$D_IN = mac_r2_weight_0 ;
  assign mac_r2_w11$EN = 1'd1 ;

  // register mac_r2_w12
  assign mac_r2_w12$D_IN = mac_r2_weight_1 ;
  assign mac_r2_w12$EN = 1'd1 ;

  // register mac_r2_w13
  assign mac_r2_w13$D_IN = mac_r2_weight_2 ;
  assign mac_r2_w13$EN = 1'd1 ;

  // register mac_r2_w14
  assign mac_r2_w14$D_IN = mac_r2_weight_3 ;
  assign mac_r2_w14$EN = 1'd1 ;

  // register mac_r2_weight_0
  assign mac_r2_weight_0$D_IN = weight2_0 ;
  assign mac_r2_weight_0$EN =
	     NOT_mac_r1_psum_out_0_81_EQ_0_85_86_OR_NOT_mac_ETC___d196 ||
	     psum_out_0 != 32'd0 ;

  // register mac_r2_weight_1
  assign mac_r2_weight_1$D_IN = weight2_1 ;
  assign mac_r2_weight_1$EN =
	     NOT_mac_r1_psum_out_0_81_EQ_0_85_86_OR_NOT_mac_ETC___d196 ||
	     psum_out_0 != 32'd0 ;

  // register mac_r2_weight_2
  assign mac_r2_weight_2$D_IN = weight2_2 ;
  assign mac_r2_weight_2$EN =
	     NOT_mac_r1_psum_out_0_81_EQ_0_85_86_OR_NOT_mac_ETC___d196 ||
	     psum_out_0 != 32'd0 ;

  // register mac_r2_weight_3
  assign mac_r2_weight_3$D_IN = weight2_3 ;
  assign mac_r2_weight_3$EN =
	     NOT_mac_r1_psum_out_0_81_EQ_0_85_86_OR_NOT_mac_ETC___d196 ||
	     psum_out_0 != 32'd0 ;

  // register mac_r3_0
  assign mac_r3_0$D_IN = _unnamed__0_2 ;
  assign mac_r3_0$EN = 1'd1 ;

  // register mac_r3_1
  assign mac_r3_1$D_IN = _unnamed__1_2 ;
  assign mac_r3_1$EN = 1'd1 ;

  // register mac_r3_2
  assign mac_r3_2$D_IN = _unnamed__2_2 ;
  assign mac_r3_2$EN = 1'd1 ;

  // register mac_r3_3
  assign mac_r3_3$D_IN = _unnamed__3_2 ;
  assign mac_r3_3$EN = 1'd1 ;

  // register mac_r3_a11
  assign mac_r3_a11$D_IN = mac_r3_inputFifo$D_OUT ;
  assign mac_r3_a11$EN = mac_r3_inputFifo$EMPTY_N && mac_r3_rg_inputs_rx ;

  // register mac_r3_a12
  assign mac_r3_a12$D_IN = mac_r3_a11 ;
  assign mac_r3_a12$EN = mac_r3_inputFifo$EMPTY_N && mac_r3_rg_inputs_rx ;

  // register mac_r3_a13
  assign mac_r3_a13$D_IN = mac_r3_a12 ;
  assign mac_r3_a13$EN = mac_r3_inputFifo$EMPTY_N && mac_r3_rg_inputs_rx ;

  // register mac_r3_a14
  assign mac_r3_a14$D_IN = mac_r3_a13 ;
  assign mac_r3_a14$EN = mac_r3_inputFifo$EMPTY_N && mac_r3_rg_inputs_rx ;

  // register mac_r3_cycle
  assign mac_r3_cycle$D_IN = mac_r3_cycle + 32'd1 ;
  assign mac_r3_cycle$EN = 1'd1 ;

  // register mac_r3_n
  assign mac_r3_n$D_IN = mac_r3_n + 8'd1 ;
  assign mac_r3_n$EN =
	     mac_r3_inputFifo$FULL_N && mac_r3_n < 8'd4 &&
	     (mac_r3_cycle ^ 32'h80000000) > 32'h80000001 ;

  // register mac_r3_psum_in11
  assign mac_r3_psum_in11$D_IN = psum_out1_0 ;
  assign mac_r3_psum_in11$EN =
	     mac_r2_psum_out_0 != 32'd0 || mac_r2_psum_out_1 != 32'd0 ||
	     mac_r2_psum_out_2 != 32'd0 ||
	     psum_out1_3 != 32'd0 ;

  // register mac_r3_psum_in12
  assign mac_r3_psum_in12$D_IN = psum_out1_1 ;
  assign mac_r3_psum_in12$EN =
	     mac_r2_psum_out_0 != 32'd0 || mac_r2_psum_out_1 != 32'd0 ||
	     mac_r2_psum_out_2 != 32'd0 ||
	     psum_out1_3 != 32'd0 ;

  // register mac_r3_psum_in13
  assign mac_r3_psum_in13$D_IN = psum_out1_2 ;
  assign mac_r3_psum_in13$EN =
	     mac_r2_psum_out_0 != 32'd0 || mac_r2_psum_out_1 != 32'd0 ||
	     mac_r2_psum_out_2 != 32'd0 ||
	     psum_out1_3 != 32'd0 ;

  // register mac_r3_psum_in14
  assign mac_r3_psum_in14$D_IN = psum_out1_3 ;
  assign mac_r3_psum_in14$EN =
	     mac_r2_psum_out_0 != 32'd0 || mac_r2_psum_out_1 != 32'd0 ||
	     mac_r2_psum_out_2 != 32'd0 ||
	     psum_out1_3 != 32'd0 ;

  // register mac_r3_psum_out_0
  assign mac_r3_psum_out_0$D_IN = mac_r3_mac1$mav_psumout ;
  assign mac_r3_psum_out_0$EN = 1'd1 ;

  // register mac_r3_psum_out_1
  assign mac_r3_psum_out_1$D_IN = mac_r3_mac2$mav_psumout ;
  assign mac_r3_psum_out_1$EN = 1'd1 ;

  // register mac_r3_psum_out_2
  assign mac_r3_psum_out_2$D_IN = mac_r3_mac3$mav_psumout ;
  assign mac_r3_psum_out_2$EN = 1'd1 ;

  // register mac_r3_psum_out_3
  assign mac_r3_psum_out_3$D_IN = mac_r3_mac4$mav_psumout ;
  assign mac_r3_psum_out_3$EN = 1'd1 ;

  // register mac_r3_rg_inputs_rx
  assign mac_r3_rg_inputs_rx$D_IN = 1'd1 ;
  assign mac_r3_rg_inputs_rx$EN =
	     mac_r2_psum_out_0 != 32'd0 || mac_r2_psum_out_1 != 32'd0 ||
	     mac_r2_psum_out_2 != 32'd0 ||
	     psum_out1_3 != 32'd0 ;

  // register mac_r3_w11
  assign mac_r3_w11$D_IN = mac_r3_weight_0 ;
  assign mac_r3_w11$EN = 1'd1 ;

  // register mac_r3_w12
  assign mac_r3_w12$D_IN = mac_r3_weight_1 ;
  assign mac_r3_w12$EN = 1'd1 ;

  // register mac_r3_w13
  assign mac_r3_w13$D_IN = mac_r3_weight_2 ;
  assign mac_r3_w13$EN = 1'd1 ;

  // register mac_r3_w14
  assign mac_r3_w14$D_IN = mac_r3_weight_3 ;
  assign mac_r3_w14$EN = 1'd1 ;

  // register mac_r3_weight_0
  assign mac_r3_weight_0$D_IN = weight3_0 ;
  assign mac_r3_weight_0$EN =
	     mac_r2_psum_out_0 != 32'd0 || mac_r2_psum_out_1 != 32'd0 ||
	     mac_r2_psum_out_2 != 32'd0 ||
	     psum_out1_3 != 32'd0 ;

  // register mac_r3_weight_1
  assign mac_r3_weight_1$D_IN = weight3_1 ;
  assign mac_r3_weight_1$EN =
	     mac_r2_psum_out_0 != 32'd0 || mac_r2_psum_out_1 != 32'd0 ||
	     mac_r2_psum_out_2 != 32'd0 ||
	     psum_out1_3 != 32'd0 ;

  // register mac_r3_weight_2
  assign mac_r3_weight_2$D_IN = weight3_2 ;
  assign mac_r3_weight_2$EN =
	     mac_r2_psum_out_0 != 32'd0 || mac_r2_psum_out_1 != 32'd0 ||
	     mac_r2_psum_out_2 != 32'd0 ||
	     psum_out1_3 != 32'd0 ;

  // register mac_r3_weight_3
  assign mac_r3_weight_3$D_IN = weight3_3 ;
  assign mac_r3_weight_3$EN =
	     mac_r2_psum_out_0 != 32'd0 || mac_r2_psum_out_1 != 32'd0 ||
	     mac_r2_psum_out_2 != 32'd0 ||
	     psum_out1_3 != 32'd0 ;

  // register mac_r4_0
  assign mac_r4_0$D_IN = _unnamed__0_3 ;
  assign mac_r4_0$EN = 1'd1 ;

  // register mac_r4_1
  assign mac_r4_1$D_IN = _unnamed__1_3 ;
  assign mac_r4_1$EN = 1'd1 ;

  // register mac_r4_2
  assign mac_r4_2$D_IN = _unnamed__2_3 ;
  assign mac_r4_2$EN = 1'd1 ;

  // register mac_r4_3
  assign mac_r4_3$D_IN = _unnamed__3_3 ;
  assign mac_r4_3$EN = 1'd1 ;

  // register mac_r4_a11
  assign mac_r4_a11$D_IN = mac_r4_inputFifo$D_OUT ;
  assign mac_r4_a11$EN = mac_r4_inputFifo$EMPTY_N && mac_r4_rg_inputs_rx ;

  // register mac_r4_a12
  assign mac_r4_a12$D_IN = mac_r4_a11 ;
  assign mac_r4_a12$EN = mac_r4_inputFifo$EMPTY_N && mac_r4_rg_inputs_rx ;

  // register mac_r4_a13
  assign mac_r4_a13$D_IN = mac_r4_a12 ;
  assign mac_r4_a13$EN = mac_r4_inputFifo$EMPTY_N && mac_r4_rg_inputs_rx ;

  // register mac_r4_a14
  assign mac_r4_a14$D_IN = mac_r4_a13 ;
  assign mac_r4_a14$EN = mac_r4_inputFifo$EMPTY_N && mac_r4_rg_inputs_rx ;

  // register mac_r4_cycle
  assign mac_r4_cycle$D_IN = mac_r4_cycle + 32'd1 ;
  assign mac_r4_cycle$EN = 1'd1 ;

  // register mac_r4_n
  assign mac_r4_n$D_IN = mac_r4_n + 8'd1 ;
  assign mac_r4_n$EN =
	     mac_r4_inputFifo$FULL_N && mac_r4_n < 8'd4 &&
	     (mac_r4_cycle ^ 32'h80000000) > 32'h80000001 ;

  // register mac_r4_psum_in11
  assign mac_r4_psum_in11$D_IN = psum_out2_0 ;
  assign mac_r4_psum_in11$EN =
	     mac_r3_psum_out_0 != 32'd0 || mac_r3_psum_out_1 != 32'd0 ||
	     mac_r3_psum_out_2 != 32'd0 ||
	     psum_out2_3 != 32'd0 ;

  // register mac_r4_psum_in12
  assign mac_r4_psum_in12$D_IN = psum_out2_1 ;
  assign mac_r4_psum_in12$EN =
	     mac_r3_psum_out_0 != 32'd0 || mac_r3_psum_out_1 != 32'd0 ||
	     mac_r3_psum_out_2 != 32'd0 ||
	     psum_out2_3 != 32'd0 ;

  // register mac_r4_psum_in13
  assign mac_r4_psum_in13$D_IN = psum_out2_2 ;
  assign mac_r4_psum_in13$EN =
	     mac_r3_psum_out_0 != 32'd0 || mac_r3_psum_out_1 != 32'd0 ||
	     mac_r3_psum_out_2 != 32'd0 ||
	     psum_out2_3 != 32'd0 ;

  // register mac_r4_psum_in14
  assign mac_r4_psum_in14$D_IN = psum_out2_3 ;
  assign mac_r4_psum_in14$EN =
	     mac_r3_psum_out_0 != 32'd0 || mac_r3_psum_out_1 != 32'd0 ||
	     mac_r3_psum_out_2 != 32'd0 ||
	     psum_out2_3 != 32'd0 ;

  // register mac_r4_psum_out_0
  assign mac_r4_psum_out_0$D_IN = mac_r4_mac1$mav_psumout ;
  assign mac_r4_psum_out_0$EN = 1'd1 ;

  // register mac_r4_psum_out_1
  assign mac_r4_psum_out_1$D_IN = mac_r4_mac2$mav_psumout ;
  assign mac_r4_psum_out_1$EN = 1'd1 ;

  // register mac_r4_psum_out_2
  assign mac_r4_psum_out_2$D_IN = mac_r4_mac3$mav_psumout ;
  assign mac_r4_psum_out_2$EN = 1'd1 ;

  // register mac_r4_psum_out_3
  assign mac_r4_psum_out_3$D_IN = mac_r4_mac4$mav_psumout ;
  assign mac_r4_psum_out_3$EN = 1'd1 ;

  // register mac_r4_rg_inputs_rx
  assign mac_r4_rg_inputs_rx$D_IN = 1'd1 ;
  assign mac_r4_rg_inputs_rx$EN =
	     mac_r3_psum_out_0 != 32'd0 || mac_r3_psum_out_1 != 32'd0 ||
	     mac_r3_psum_out_2 != 32'd0 ||
	     psum_out2_3 != 32'd0 ;

  // register mac_r4_w11
  assign mac_r4_w11$D_IN = mac_r4_weight_0 ;
  assign mac_r4_w11$EN = 1'd1 ;

  // register mac_r4_w12
  assign mac_r4_w12$D_IN = mac_r4_weight_1 ;
  assign mac_r4_w12$EN = 1'd1 ;

  // register mac_r4_w13
  assign mac_r4_w13$D_IN = mac_r4_weight_2 ;
  assign mac_r4_w13$EN = 1'd1 ;

  // register mac_r4_w14
  assign mac_r4_w14$D_IN = mac_r4_weight_3 ;
  assign mac_r4_w14$EN = 1'd1 ;

  // register mac_r4_weight_0
  assign mac_r4_weight_0$D_IN = weight4_0 ;
  assign mac_r4_weight_0$EN =
	     mac_r3_psum_out_0 != 32'd0 || mac_r3_psum_out_1 != 32'd0 ||
	     mac_r3_psum_out_2 != 32'd0 ||
	     psum_out2_3 != 32'd0 ;

  // register mac_r4_weight_1
  assign mac_r4_weight_1$D_IN = weight4_1 ;
  assign mac_r4_weight_1$EN =
	     mac_r3_psum_out_0 != 32'd0 || mac_r3_psum_out_1 != 32'd0 ||
	     mac_r3_psum_out_2 != 32'd0 ||
	     psum_out2_3 != 32'd0 ;

  // register mac_r4_weight_2
  assign mac_r4_weight_2$D_IN = weight4_2 ;
  assign mac_r4_weight_2$EN =
	     mac_r3_psum_out_0 != 32'd0 || mac_r3_psum_out_1 != 32'd0 ||
	     mac_r3_psum_out_2 != 32'd0 ||
	     psum_out2_3 != 32'd0 ;

  // register mac_r4_weight_3
  assign mac_r4_weight_3$D_IN = weight4_3 ;
  assign mac_r4_weight_3$EN =
	     mac_r3_psum_out_0 != 32'd0 || mac_r3_psum_out_1 != 32'd0 ||
	     mac_r3_psum_out_2 != 32'd0 ||
	     psum_out2_3 != 32'd0 ;

  // register psum_in_0
  assign psum_in_0$D_IN = 32'h0 ;
  assign psum_in_0$EN = 1'b0 ;

  // register psum_in_1
  assign psum_in_1$D_IN = 32'h0 ;
  assign psum_in_1$EN = 1'b0 ;

  // register psum_in_2
  assign psum_in_2$D_IN = 32'h0 ;
  assign psum_in_2$EN = 1'b0 ;

  // register psum_in_3
  assign psum_in_3$D_IN = 32'h0 ;
  assign psum_in_3$EN = 1'b0 ;

  // register psum_out1_0
  assign psum_out1_0$D_IN = mac_r2_psum_out_0 ;
  assign psum_out1_0$EN = 1'd1 ;

  // register psum_out1_1
  assign psum_out1_1$D_IN = mac_r2_psum_out_1 ;
  assign psum_out1_1$EN = 1'd1 ;

  // register psum_out1_2
  assign psum_out1_2$D_IN = mac_r2_psum_out_2 ;
  assign psum_out1_2$EN = 1'd1 ;

  // register psum_out1_3
  assign psum_out1_3$D_IN = mac_r2_psum_out_3 ;
  assign psum_out1_3$EN = 1'd1 ;

  // register psum_out2_0
  assign psum_out2_0$D_IN = mac_r3_psum_out_0 ;
  assign psum_out2_0$EN = 1'd1 ;

  // register psum_out2_1
  assign psum_out2_1$D_IN = mac_r3_psum_out_1 ;
  assign psum_out2_1$EN = 1'd1 ;

  // register psum_out2_2
  assign psum_out2_2$D_IN = mac_r3_psum_out_2 ;
  assign psum_out2_2$EN = 1'd1 ;

  // register psum_out2_3
  assign psum_out2_3$D_IN = mac_r3_psum_out_3 ;
  assign psum_out2_3$EN = 1'd1 ;

  // register psum_out3_0
  assign psum_out3_0$D_IN = mac_r4_psum_out_0 ;
  assign psum_out3_0$EN = 1'd1 ;

  // register psum_out3_1
  assign psum_out3_1$D_IN = mac_r4_psum_out_1 ;
  assign psum_out3_1$EN = 1'd1 ;

  // register psum_out3_2
  assign psum_out3_2$D_IN = mac_r4_psum_out_2 ;
  assign psum_out3_2$EN = 1'd1 ;

  // register psum_out3_3
  assign psum_out3_3$D_IN = mac_r4_psum_out_3 ;
  assign psum_out3_3$EN = 1'd1 ;

  // register psum_out_0
  assign psum_out_0$D_IN = mac_r1_psum_out_0 ;
  assign psum_out_0$EN = 1'd1 ;

  // register psum_out_1
  assign psum_out_1$D_IN = mac_r1_psum_out_1 ;
  assign psum_out_1$EN = 1'd1 ;

  // register psum_out_2
  assign psum_out_2$D_IN = mac_r1_psum_out_2 ;
  assign psum_out_2$EN = 1'd1 ;

  // register psum_out_3
  assign psum_out_3$D_IN = mac_r1_psum_out_3 ;
  assign psum_out_3$EN = 1'd1 ;

  // register rg_psum_received
  assign rg_psum_received$D_IN = 1'b0 ;
  assign rg_psum_received$EN = 1'b0 ;

  // register weight2_0
  assign weight2_0$D_IN = top_cnn_input__weight2[31:0] ;
  assign weight2_0$EN = EN_top_cnn_input ;

  // register weight2_1
  assign weight2_1$D_IN = top_cnn_input__weight2[63:32] ;
  assign weight2_1$EN = EN_top_cnn_input ;

  // register weight2_2
  assign weight2_2$D_IN = top_cnn_input__weight2[95:64] ;
  assign weight2_2$EN = EN_top_cnn_input ;

  // register weight2_3
  assign weight2_3$D_IN = top_cnn_input__weight2[127:96] ;
  assign weight2_3$EN = EN_top_cnn_input ;

  // register weight3_0
  assign weight3_0$D_IN = top_cnn_input__weight3[31:0] ;
  assign weight3_0$EN = EN_top_cnn_input ;

  // register weight3_1
  assign weight3_1$D_IN = top_cnn_input__weight3[63:32] ;
  assign weight3_1$EN = EN_top_cnn_input ;

  // register weight3_2
  assign weight3_2$D_IN = top_cnn_input__weight3[95:64] ;
  assign weight3_2$EN = EN_top_cnn_input ;

  // register weight3_3
  assign weight3_3$D_IN = top_cnn_input__weight3[127:96] ;
  assign weight3_3$EN = EN_top_cnn_input ;

  // register weight4_0
  assign weight4_0$D_IN = top_cnn_input__weight4[31:0] ;
  assign weight4_0$EN = EN_top_cnn_input ;

  // register weight4_1
  assign weight4_1$D_IN = top_cnn_input__weight4[63:32] ;
  assign weight4_1$EN = EN_top_cnn_input ;

  // register weight4_2
  assign weight4_2$D_IN = top_cnn_input__weight4[95:64] ;
  assign weight4_2$EN = EN_top_cnn_input ;

  // register weight4_3
  assign weight4_3$D_IN = top_cnn_input__weight4[127:96] ;
  assign weight4_3$EN = EN_top_cnn_input ;

  // register weight_0
  assign weight_0$D_IN = top_cnn_input__weight1[31:0] ;
  assign weight_0$EN = EN_top_cnn_input ;

  // register weight_1
  assign weight_1$D_IN = top_cnn_input__weight1[63:32] ;
  assign weight_1$EN = EN_top_cnn_input ;

  // register weight_2
  assign weight_2$D_IN = top_cnn_input__weight1[95:64] ;
  assign weight_2$EN = EN_top_cnn_input ;

  // register weight_3
  assign weight_3$D_IN = top_cnn_input__weight1[127:96] ;
  assign weight_3$EN = EN_top_cnn_input ;

  // submodule mac_r1_inputFifo
  always@(mac_r1_n or mac_r1_0 or mac_r1_1 or mac_r1_2 or mac_r1_3)
  begin
    case (mac_r1_n)
      8'd0: mac_r1_inputFifo$D_IN = mac_r1_0;
      8'd1: mac_r1_inputFifo$D_IN = mac_r1_1;
      8'd2: mac_r1_inputFifo$D_IN = mac_r1_2;
      8'd3: mac_r1_inputFifo$D_IN = mac_r1_3;
      default: mac_r1_inputFifo$D_IN = 32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign mac_r1_inputFifo$ENQ =
	     mac_r1_inputFifo$FULL_N && mac_r1_n < 8'd4 &&
	     (mac_r1_cycle ^ 32'h80000000) > 32'h80000001 ;
  assign mac_r1_inputFifo$DEQ =
	     mac_r1_inputFifo$EMPTY_N && mac_r1_rg_inputs_rx ;
  assign mac_r1_inputFifo$CLR = 1'b0 ;

  // submodule mac_r1_mac1
  assign mac_r1_mac1$mav_psumout_input_data = mac_r1_a11 ;
  assign mac_r1_mac1$mav_psumout_psum = mac_r1_psum_in11 ;
  assign mac_r1_mac1$mav_psumout_weight = mac_r1_w11 ;
  assign mac_r1_mac1$EN_mav_psumout = 1'd1 ;

  // submodule mac_r1_mac2
  assign mac_r1_mac2$mav_psumout_input_data = mac_r1_a12 ;
  assign mac_r1_mac2$mav_psumout_psum = mac_r1_psum_in12 ;
  assign mac_r1_mac2$mav_psumout_weight = mac_r1_w12 ;
  assign mac_r1_mac2$EN_mav_psumout = 1'd1 ;

  // submodule mac_r1_mac3
  assign mac_r1_mac3$mav_psumout_input_data = mac_r1_a13 ;
  assign mac_r1_mac3$mav_psumout_psum = mac_r1_psum_in13 ;
  assign mac_r1_mac3$mav_psumout_weight = mac_r1_w13 ;
  assign mac_r1_mac3$EN_mav_psumout = 1'd1 ;

  // submodule mac_r1_mac4
  assign mac_r1_mac4$mav_psumout_input_data = mac_r1_a14 ;
  assign mac_r1_mac4$mav_psumout_psum = mac_r1_psum_in14 ;
  assign mac_r1_mac4$mav_psumout_weight = mac_r1_w14 ;
  assign mac_r1_mac4$EN_mav_psumout = 1'd1 ;

  // submodule mac_r2_inputFifo
  always@(mac_r2_n or mac_r2_0 or mac_r2_1 or mac_r2_2 or mac_r2_3)
  begin
    case (mac_r2_n)
      8'd0: mac_r2_inputFifo$D_IN = mac_r2_0;
      8'd1: mac_r2_inputFifo$D_IN = mac_r2_1;
      8'd2: mac_r2_inputFifo$D_IN = mac_r2_2;
      8'd3: mac_r2_inputFifo$D_IN = mac_r2_3;
      default: mac_r2_inputFifo$D_IN = 32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign mac_r2_inputFifo$ENQ =
	     mac_r2_inputFifo$FULL_N && mac_r2_n < 8'd4 &&
	     (mac_r2_cycle ^ 32'h80000000) > 32'h80000001 ;
  assign mac_r2_inputFifo$DEQ =
	     mac_r2_inputFifo$EMPTY_N && mac_r2_rg_inputs_rx ;
  assign mac_r2_inputFifo$CLR = 1'b0 ;

  // submodule mac_r2_mac1
  assign mac_r2_mac1$mav_psumout_input_data = mac_r2_a11 ;
  assign mac_r2_mac1$mav_psumout_psum = mac_r2_psum_in11 ;
  assign mac_r2_mac1$mav_psumout_weight = mac_r2_w11 ;
  assign mac_r2_mac1$EN_mav_psumout = 1'd1 ;

  // submodule mac_r2_mac2
  assign mac_r2_mac2$mav_psumout_input_data = mac_r2_a12 ;
  assign mac_r2_mac2$mav_psumout_psum = mac_r2_psum_in12 ;
  assign mac_r2_mac2$mav_psumout_weight = mac_r2_w12 ;
  assign mac_r2_mac2$EN_mav_psumout = 1'd1 ;

  // submodule mac_r2_mac3
  assign mac_r2_mac3$mav_psumout_input_data = mac_r2_a13 ;
  assign mac_r2_mac3$mav_psumout_psum = mac_r2_psum_in13 ;
  assign mac_r2_mac3$mav_psumout_weight = mac_r2_w13 ;
  assign mac_r2_mac3$EN_mav_psumout = 1'd1 ;

  // submodule mac_r2_mac4
  assign mac_r2_mac4$mav_psumout_input_data = mac_r2_a14 ;
  assign mac_r2_mac4$mav_psumout_psum = mac_r2_psum_in14 ;
  assign mac_r2_mac4$mav_psumout_weight = mac_r2_w14 ;
  assign mac_r2_mac4$EN_mav_psumout = 1'd1 ;

  // submodule mac_r3_inputFifo
  always@(mac_r3_n or mac_r3_0 or mac_r3_1 or mac_r3_2 or mac_r3_3)
  begin
    case (mac_r3_n)
      8'd0: mac_r3_inputFifo$D_IN = mac_r3_0;
      8'd1: mac_r3_inputFifo$D_IN = mac_r3_1;
      8'd2: mac_r3_inputFifo$D_IN = mac_r3_2;
      8'd3: mac_r3_inputFifo$D_IN = mac_r3_3;
      default: mac_r3_inputFifo$D_IN = 32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign mac_r3_inputFifo$ENQ =
	     mac_r3_inputFifo$FULL_N && mac_r3_n < 8'd4 &&
	     (mac_r3_cycle ^ 32'h80000000) > 32'h80000001 ;
  assign mac_r3_inputFifo$DEQ =
	     mac_r3_inputFifo$EMPTY_N && mac_r3_rg_inputs_rx ;
  assign mac_r3_inputFifo$CLR = 1'b0 ;

  // submodule mac_r3_mac1
  assign mac_r3_mac1$mav_psumout_input_data = mac_r3_a11 ;
  assign mac_r3_mac1$mav_psumout_psum = mac_r3_psum_in11 ;
  assign mac_r3_mac1$mav_psumout_weight = mac_r3_w11 ;
  assign mac_r3_mac1$EN_mav_psumout = 1'd1 ;

  // submodule mac_r3_mac2
  assign mac_r3_mac2$mav_psumout_input_data = mac_r3_a12 ;
  assign mac_r3_mac2$mav_psumout_psum = mac_r3_psum_in12 ;
  assign mac_r3_mac2$mav_psumout_weight = mac_r3_w12 ;
  assign mac_r3_mac2$EN_mav_psumout = 1'd1 ;

  // submodule mac_r3_mac3
  assign mac_r3_mac3$mav_psumout_input_data = mac_r3_a13 ;
  assign mac_r3_mac3$mav_psumout_psum = mac_r3_psum_in13 ;
  assign mac_r3_mac3$mav_psumout_weight = mac_r3_w13 ;
  assign mac_r3_mac3$EN_mav_psumout = 1'd1 ;

  // submodule mac_r3_mac4
  assign mac_r3_mac4$mav_psumout_input_data = mac_r3_a14 ;
  assign mac_r3_mac4$mav_psumout_psum = mac_r3_psum_in14 ;
  assign mac_r3_mac4$mav_psumout_weight = mac_r3_w14 ;
  assign mac_r3_mac4$EN_mav_psumout = 1'd1 ;

  // submodule mac_r4_inputFifo
  always@(mac_r4_n or mac_r4_0 or mac_r4_1 or mac_r4_2 or mac_r4_3)
  begin
    case (mac_r4_n)
      8'd0: mac_r4_inputFifo$D_IN = mac_r4_0;
      8'd1: mac_r4_inputFifo$D_IN = mac_r4_1;
      8'd2: mac_r4_inputFifo$D_IN = mac_r4_2;
      8'd3: mac_r4_inputFifo$D_IN = mac_r4_3;
      default: mac_r4_inputFifo$D_IN = 32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign mac_r4_inputFifo$ENQ =
	     mac_r4_inputFifo$FULL_N && mac_r4_n < 8'd4 &&
	     (mac_r4_cycle ^ 32'h80000000) > 32'h80000001 ;
  assign mac_r4_inputFifo$DEQ =
	     mac_r4_inputFifo$EMPTY_N && mac_r4_rg_inputs_rx ;
  assign mac_r4_inputFifo$CLR = 1'b0 ;

  // submodule mac_r4_mac1
  assign mac_r4_mac1$mav_psumout_input_data = mac_r4_a11 ;
  assign mac_r4_mac1$mav_psumout_psum = mac_r4_psum_in11 ;
  assign mac_r4_mac1$mav_psumout_weight = mac_r4_w11 ;
  assign mac_r4_mac1$EN_mav_psumout = 1'd1 ;

  // submodule mac_r4_mac2
  assign mac_r4_mac2$mav_psumout_input_data = mac_r4_a12 ;
  assign mac_r4_mac2$mav_psumout_psum = mac_r4_psum_in12 ;
  assign mac_r4_mac2$mav_psumout_weight = mac_r4_w12 ;
  assign mac_r4_mac2$EN_mav_psumout = 1'd1 ;

  // submodule mac_r4_mac3
  assign mac_r4_mac3$mav_psumout_input_data = mac_r4_a13 ;
  assign mac_r4_mac3$mav_psumout_psum = mac_r4_psum_in13 ;
  assign mac_r4_mac3$mav_psumout_weight = mac_r4_w13 ;
  assign mac_r4_mac3$EN_mav_psumout = 1'd1 ;

  // submodule mac_r4_mac4
  assign mac_r4_mac4$mav_psumout_input_data = mac_r4_a14 ;
  assign mac_r4_mac4$mav_psumout_psum = mac_r4_psum_in14 ;
  assign mac_r4_mac4$mav_psumout_weight = mac_r4_w14 ;
  assign mac_r4_mac4$EN_mav_psumout = 1'd1 ;

  // remaining internal signals
  assign NOT_mac_r1_psum_out_0_81_EQ_0_85_86_OR_NOT_mac_ETC___d196 =
	     mac_r1_psum_out_0 != 32'd0 || mac_r1_psum_out_1 != 32'd0 ||
	     mac_r1_psum_out_2 != 32'd0 ||
	     psum_out_3 != 32'd0 ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        _unnamed__0 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	_unnamed__0_1 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	_unnamed__0_2 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	_unnamed__0_3 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	_unnamed__1 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	_unnamed__1_1 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	_unnamed__1_2 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	_unnamed__1_3 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	_unnamed__2 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	_unnamed__2_1 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	_unnamed__2_2 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	_unnamed__2_3 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	_unnamed__3 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	_unnamed__3_1 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	_unnamed__3_2 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	_unnamed__3_3 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mac_r1_0 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mac_r1_1 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mac_r1_2 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mac_r1_3 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mac_r1_a11 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mac_r1_a12 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mac_r1_a13 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mac_r1_a14 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mac_r1_cycle <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mac_r1_n <= `BSV_ASSIGNMENT_DELAY 8'd0;
	mac_r1_psum_in11 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mac_r1_psum_in12 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mac_r1_psum_in13 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mac_r1_psum_in14 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mac_r1_psum_out_0 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mac_r1_psum_out_1 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mac_r1_psum_out_2 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mac_r1_psum_out_3 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mac_r1_rg_inputs_rx <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mac_r1_w11 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mac_r1_w12 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mac_r1_w13 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mac_r1_w14 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mac_r1_weight_0 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mac_r1_weight_1 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mac_r1_weight_2 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mac_r1_weight_3 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mac_r2_0 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mac_r2_1 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mac_r2_2 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mac_r2_3 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mac_r2_a11 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mac_r2_a12 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mac_r2_a13 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mac_r2_a14 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mac_r2_cycle <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mac_r2_n <= `BSV_ASSIGNMENT_DELAY 8'd0;
	mac_r2_psum_in11 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mac_r2_psum_in12 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mac_r2_psum_in13 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mac_r2_psum_in14 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mac_r2_psum_out_0 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mac_r2_psum_out_1 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mac_r2_psum_out_2 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mac_r2_psum_out_3 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mac_r2_rg_inputs_rx <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mac_r2_w11 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mac_r2_w12 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mac_r2_w13 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mac_r2_w14 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mac_r2_weight_0 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mac_r2_weight_1 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mac_r2_weight_2 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mac_r2_weight_3 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mac_r3_0 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mac_r3_1 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mac_r3_2 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mac_r3_3 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mac_r3_a11 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mac_r3_a12 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mac_r3_a13 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mac_r3_a14 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mac_r3_cycle <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mac_r3_n <= `BSV_ASSIGNMENT_DELAY 8'd0;
	mac_r3_psum_in11 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mac_r3_psum_in12 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mac_r3_psum_in13 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mac_r3_psum_in14 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mac_r3_psum_out_0 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mac_r3_psum_out_1 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mac_r3_psum_out_2 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mac_r3_psum_out_3 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mac_r3_rg_inputs_rx <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mac_r3_w11 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mac_r3_w12 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mac_r3_w13 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mac_r3_w14 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mac_r3_weight_0 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mac_r3_weight_1 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mac_r3_weight_2 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mac_r3_weight_3 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mac_r4_0 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mac_r4_1 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mac_r4_2 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mac_r4_3 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mac_r4_a11 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mac_r4_a12 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mac_r4_a13 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mac_r4_a14 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mac_r4_cycle <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mac_r4_n <= `BSV_ASSIGNMENT_DELAY 8'd0;
	mac_r4_psum_in11 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mac_r4_psum_in12 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mac_r4_psum_in13 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mac_r4_psum_in14 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mac_r4_psum_out_0 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mac_r4_psum_out_1 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mac_r4_psum_out_2 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mac_r4_psum_out_3 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mac_r4_rg_inputs_rx <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mac_r4_w11 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mac_r4_w12 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mac_r4_w13 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mac_r4_w14 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mac_r4_weight_0 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mac_r4_weight_1 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mac_r4_weight_2 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mac_r4_weight_3 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	psum_in_0 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	psum_in_1 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	psum_in_2 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	psum_in_3 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	psum_out1_0 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	psum_out1_1 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	psum_out1_2 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	psum_out1_3 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	psum_out2_0 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	psum_out2_1 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	psum_out2_2 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	psum_out2_3 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	psum_out3_0 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	psum_out3_1 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	psum_out3_2 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	psum_out3_3 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	psum_out_0 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	psum_out_1 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	psum_out_2 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	psum_out_3 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rg_psum_received <= `BSV_ASSIGNMENT_DELAY 1'd0;
	weight2_0 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	weight2_1 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	weight2_2 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	weight2_3 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	weight3_0 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	weight3_1 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	weight3_2 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	weight3_3 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	weight4_0 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	weight4_1 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	weight4_2 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	weight4_3 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	weight_0 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	weight_1 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	weight_2 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	weight_3 <= `BSV_ASSIGNMENT_DELAY 32'd0;
      end
    else
      begin
        if (_unnamed__0$EN)
	  _unnamed__0 <= `BSV_ASSIGNMENT_DELAY _unnamed__0$D_IN;
	if (_unnamed__0_1$EN)
	  _unnamed__0_1 <= `BSV_ASSIGNMENT_DELAY _unnamed__0_1$D_IN;
	if (_unnamed__0_2$EN)
	  _unnamed__0_2 <= `BSV_ASSIGNMENT_DELAY _unnamed__0_2$D_IN;
	if (_unnamed__0_3$EN)
	  _unnamed__0_3 <= `BSV_ASSIGNMENT_DELAY _unnamed__0_3$D_IN;
	if (_unnamed__1$EN)
	  _unnamed__1 <= `BSV_ASSIGNMENT_DELAY _unnamed__1$D_IN;
	if (_unnamed__1_1$EN)
	  _unnamed__1_1 <= `BSV_ASSIGNMENT_DELAY _unnamed__1_1$D_IN;
	if (_unnamed__1_2$EN)
	  _unnamed__1_2 <= `BSV_ASSIGNMENT_DELAY _unnamed__1_2$D_IN;
	if (_unnamed__1_3$EN)
	  _unnamed__1_3 <= `BSV_ASSIGNMENT_DELAY _unnamed__1_3$D_IN;
	if (_unnamed__2$EN)
	  _unnamed__2 <= `BSV_ASSIGNMENT_DELAY _unnamed__2$D_IN;
	if (_unnamed__2_1$EN)
	  _unnamed__2_1 <= `BSV_ASSIGNMENT_DELAY _unnamed__2_1$D_IN;
	if (_unnamed__2_2$EN)
	  _unnamed__2_2 <= `BSV_ASSIGNMENT_DELAY _unnamed__2_2$D_IN;
	if (_unnamed__2_3$EN)
	  _unnamed__2_3 <= `BSV_ASSIGNMENT_DELAY _unnamed__2_3$D_IN;
	if (_unnamed__3$EN)
	  _unnamed__3 <= `BSV_ASSIGNMENT_DELAY _unnamed__3$D_IN;
	if (_unnamed__3_1$EN)
	  _unnamed__3_1 <= `BSV_ASSIGNMENT_DELAY _unnamed__3_1$D_IN;
	if (_unnamed__3_2$EN)
	  _unnamed__3_2 <= `BSV_ASSIGNMENT_DELAY _unnamed__3_2$D_IN;
	if (_unnamed__3_3$EN)
	  _unnamed__3_3 <= `BSV_ASSIGNMENT_DELAY _unnamed__3_3$D_IN;
	if (mac_r1_0$EN) mac_r1_0 <= `BSV_ASSIGNMENT_DELAY mac_r1_0$D_IN;
	if (mac_r1_1$EN) mac_r1_1 <= `BSV_ASSIGNMENT_DELAY mac_r1_1$D_IN;
	if (mac_r1_2$EN) mac_r1_2 <= `BSV_ASSIGNMENT_DELAY mac_r1_2$D_IN;
	if (mac_r1_3$EN) mac_r1_3 <= `BSV_ASSIGNMENT_DELAY mac_r1_3$D_IN;
	if (mac_r1_a11$EN)
	  mac_r1_a11 <= `BSV_ASSIGNMENT_DELAY mac_r1_a11$D_IN;
	if (mac_r1_a12$EN)
	  mac_r1_a12 <= `BSV_ASSIGNMENT_DELAY mac_r1_a12$D_IN;
	if (mac_r1_a13$EN)
	  mac_r1_a13 <= `BSV_ASSIGNMENT_DELAY mac_r1_a13$D_IN;
	if (mac_r1_a14$EN)
	  mac_r1_a14 <= `BSV_ASSIGNMENT_DELAY mac_r1_a14$D_IN;
	if (mac_r1_cycle$EN)
	  mac_r1_cycle <= `BSV_ASSIGNMENT_DELAY mac_r1_cycle$D_IN;
	if (mac_r1_n$EN) mac_r1_n <= `BSV_ASSIGNMENT_DELAY mac_r1_n$D_IN;
	if (mac_r1_psum_in11$EN)
	  mac_r1_psum_in11 <= `BSV_ASSIGNMENT_DELAY mac_r1_psum_in11$D_IN;
	if (mac_r1_psum_in12$EN)
	  mac_r1_psum_in12 <= `BSV_ASSIGNMENT_DELAY mac_r1_psum_in12$D_IN;
	if (mac_r1_psum_in13$EN)
	  mac_r1_psum_in13 <= `BSV_ASSIGNMENT_DELAY mac_r1_psum_in13$D_IN;
	if (mac_r1_psum_in14$EN)
	  mac_r1_psum_in14 <= `BSV_ASSIGNMENT_DELAY mac_r1_psum_in14$D_IN;
	if (mac_r1_psum_out_0$EN)
	  mac_r1_psum_out_0 <= `BSV_ASSIGNMENT_DELAY mac_r1_psum_out_0$D_IN;
	if (mac_r1_psum_out_1$EN)
	  mac_r1_psum_out_1 <= `BSV_ASSIGNMENT_DELAY mac_r1_psum_out_1$D_IN;
	if (mac_r1_psum_out_2$EN)
	  mac_r1_psum_out_2 <= `BSV_ASSIGNMENT_DELAY mac_r1_psum_out_2$D_IN;
	if (mac_r1_psum_out_3$EN)
	  mac_r1_psum_out_3 <= `BSV_ASSIGNMENT_DELAY mac_r1_psum_out_3$D_IN;
	if (mac_r1_rg_inputs_rx$EN)
	  mac_r1_rg_inputs_rx <= `BSV_ASSIGNMENT_DELAY
	      mac_r1_rg_inputs_rx$D_IN;
	if (mac_r1_w11$EN)
	  mac_r1_w11 <= `BSV_ASSIGNMENT_DELAY mac_r1_w11$D_IN;
	if (mac_r1_w12$EN)
	  mac_r1_w12 <= `BSV_ASSIGNMENT_DELAY mac_r1_w12$D_IN;
	if (mac_r1_w13$EN)
	  mac_r1_w13 <= `BSV_ASSIGNMENT_DELAY mac_r1_w13$D_IN;
	if (mac_r1_w14$EN)
	  mac_r1_w14 <= `BSV_ASSIGNMENT_DELAY mac_r1_w14$D_IN;
	if (mac_r1_weight_0$EN)
	  mac_r1_weight_0 <= `BSV_ASSIGNMENT_DELAY mac_r1_weight_0$D_IN;
	if (mac_r1_weight_1$EN)
	  mac_r1_weight_1 <= `BSV_ASSIGNMENT_DELAY mac_r1_weight_1$D_IN;
	if (mac_r1_weight_2$EN)
	  mac_r1_weight_2 <= `BSV_ASSIGNMENT_DELAY mac_r1_weight_2$D_IN;
	if (mac_r1_weight_3$EN)
	  mac_r1_weight_3 <= `BSV_ASSIGNMENT_DELAY mac_r1_weight_3$D_IN;
	if (mac_r2_0$EN) mac_r2_0 <= `BSV_ASSIGNMENT_DELAY mac_r2_0$D_IN;
	if (mac_r2_1$EN) mac_r2_1 <= `BSV_ASSIGNMENT_DELAY mac_r2_1$D_IN;
	if (mac_r2_2$EN) mac_r2_2 <= `BSV_ASSIGNMENT_DELAY mac_r2_2$D_IN;
	if (mac_r2_3$EN) mac_r2_3 <= `BSV_ASSIGNMENT_DELAY mac_r2_3$D_IN;
	if (mac_r2_a11$EN)
	  mac_r2_a11 <= `BSV_ASSIGNMENT_DELAY mac_r2_a11$D_IN;
	if (mac_r2_a12$EN)
	  mac_r2_a12 <= `BSV_ASSIGNMENT_DELAY mac_r2_a12$D_IN;
	if (mac_r2_a13$EN)
	  mac_r2_a13 <= `BSV_ASSIGNMENT_DELAY mac_r2_a13$D_IN;
	if (mac_r2_a14$EN)
	  mac_r2_a14 <= `BSV_ASSIGNMENT_DELAY mac_r2_a14$D_IN;
	if (mac_r2_cycle$EN)
	  mac_r2_cycle <= `BSV_ASSIGNMENT_DELAY mac_r2_cycle$D_IN;
	if (mac_r2_n$EN) mac_r2_n <= `BSV_ASSIGNMENT_DELAY mac_r2_n$D_IN;
	if (mac_r2_psum_in11$EN)
	  mac_r2_psum_in11 <= `BSV_ASSIGNMENT_DELAY mac_r2_psum_in11$D_IN;
	if (mac_r2_psum_in12$EN)
	  mac_r2_psum_in12 <= `BSV_ASSIGNMENT_DELAY mac_r2_psum_in12$D_IN;
	if (mac_r2_psum_in13$EN)
	  mac_r2_psum_in13 <= `BSV_ASSIGNMENT_DELAY mac_r2_psum_in13$D_IN;
	if (mac_r2_psum_in14$EN)
	  mac_r2_psum_in14 <= `BSV_ASSIGNMENT_DELAY mac_r2_psum_in14$D_IN;
	if (mac_r2_psum_out_0$EN)
	  mac_r2_psum_out_0 <= `BSV_ASSIGNMENT_DELAY mac_r2_psum_out_0$D_IN;
	if (mac_r2_psum_out_1$EN)
	  mac_r2_psum_out_1 <= `BSV_ASSIGNMENT_DELAY mac_r2_psum_out_1$D_IN;
	if (mac_r2_psum_out_2$EN)
	  mac_r2_psum_out_2 <= `BSV_ASSIGNMENT_DELAY mac_r2_psum_out_2$D_IN;
	if (mac_r2_psum_out_3$EN)
	  mac_r2_psum_out_3 <= `BSV_ASSIGNMENT_DELAY mac_r2_psum_out_3$D_IN;
	if (mac_r2_rg_inputs_rx$EN)
	  mac_r2_rg_inputs_rx <= `BSV_ASSIGNMENT_DELAY
	      mac_r2_rg_inputs_rx$D_IN;
	if (mac_r2_w11$EN)
	  mac_r2_w11 <= `BSV_ASSIGNMENT_DELAY mac_r2_w11$D_IN;
	if (mac_r2_w12$EN)
	  mac_r2_w12 <= `BSV_ASSIGNMENT_DELAY mac_r2_w12$D_IN;
	if (mac_r2_w13$EN)
	  mac_r2_w13 <= `BSV_ASSIGNMENT_DELAY mac_r2_w13$D_IN;
	if (mac_r2_w14$EN)
	  mac_r2_w14 <= `BSV_ASSIGNMENT_DELAY mac_r2_w14$D_IN;
	if (mac_r2_weight_0$EN)
	  mac_r2_weight_0 <= `BSV_ASSIGNMENT_DELAY mac_r2_weight_0$D_IN;
	if (mac_r2_weight_1$EN)
	  mac_r2_weight_1 <= `BSV_ASSIGNMENT_DELAY mac_r2_weight_1$D_IN;
	if (mac_r2_weight_2$EN)
	  mac_r2_weight_2 <= `BSV_ASSIGNMENT_DELAY mac_r2_weight_2$D_IN;
	if (mac_r2_weight_3$EN)
	  mac_r2_weight_3 <= `BSV_ASSIGNMENT_DELAY mac_r2_weight_3$D_IN;
	if (mac_r3_0$EN) mac_r3_0 <= `BSV_ASSIGNMENT_DELAY mac_r3_0$D_IN;
	if (mac_r3_1$EN) mac_r3_1 <= `BSV_ASSIGNMENT_DELAY mac_r3_1$D_IN;
	if (mac_r3_2$EN) mac_r3_2 <= `BSV_ASSIGNMENT_DELAY mac_r3_2$D_IN;
	if (mac_r3_3$EN) mac_r3_3 <= `BSV_ASSIGNMENT_DELAY mac_r3_3$D_IN;
	if (mac_r3_a11$EN)
	  mac_r3_a11 <= `BSV_ASSIGNMENT_DELAY mac_r3_a11$D_IN;
	if (mac_r3_a12$EN)
	  mac_r3_a12 <= `BSV_ASSIGNMENT_DELAY mac_r3_a12$D_IN;
	if (mac_r3_a13$EN)
	  mac_r3_a13 <= `BSV_ASSIGNMENT_DELAY mac_r3_a13$D_IN;
	if (mac_r3_a14$EN)
	  mac_r3_a14 <= `BSV_ASSIGNMENT_DELAY mac_r3_a14$D_IN;
	if (mac_r3_cycle$EN)
	  mac_r3_cycle <= `BSV_ASSIGNMENT_DELAY mac_r3_cycle$D_IN;
	if (mac_r3_n$EN) mac_r3_n <= `BSV_ASSIGNMENT_DELAY mac_r3_n$D_IN;
	if (mac_r3_psum_in11$EN)
	  mac_r3_psum_in11 <= `BSV_ASSIGNMENT_DELAY mac_r3_psum_in11$D_IN;
	if (mac_r3_psum_in12$EN)
	  mac_r3_psum_in12 <= `BSV_ASSIGNMENT_DELAY mac_r3_psum_in12$D_IN;
	if (mac_r3_psum_in13$EN)
	  mac_r3_psum_in13 <= `BSV_ASSIGNMENT_DELAY mac_r3_psum_in13$D_IN;
	if (mac_r3_psum_in14$EN)
	  mac_r3_psum_in14 <= `BSV_ASSIGNMENT_DELAY mac_r3_psum_in14$D_IN;
	if (mac_r3_psum_out_0$EN)
	  mac_r3_psum_out_0 <= `BSV_ASSIGNMENT_DELAY mac_r3_psum_out_0$D_IN;
	if (mac_r3_psum_out_1$EN)
	  mac_r3_psum_out_1 <= `BSV_ASSIGNMENT_DELAY mac_r3_psum_out_1$D_IN;
	if (mac_r3_psum_out_2$EN)
	  mac_r3_psum_out_2 <= `BSV_ASSIGNMENT_DELAY mac_r3_psum_out_2$D_IN;
	if (mac_r3_psum_out_3$EN)
	  mac_r3_psum_out_3 <= `BSV_ASSIGNMENT_DELAY mac_r3_psum_out_3$D_IN;
	if (mac_r3_rg_inputs_rx$EN)
	  mac_r3_rg_inputs_rx <= `BSV_ASSIGNMENT_DELAY
	      mac_r3_rg_inputs_rx$D_IN;
	if (mac_r3_w11$EN)
	  mac_r3_w11 <= `BSV_ASSIGNMENT_DELAY mac_r3_w11$D_IN;
	if (mac_r3_w12$EN)
	  mac_r3_w12 <= `BSV_ASSIGNMENT_DELAY mac_r3_w12$D_IN;
	if (mac_r3_w13$EN)
	  mac_r3_w13 <= `BSV_ASSIGNMENT_DELAY mac_r3_w13$D_IN;
	if (mac_r3_w14$EN)
	  mac_r3_w14 <= `BSV_ASSIGNMENT_DELAY mac_r3_w14$D_IN;
	if (mac_r3_weight_0$EN)
	  mac_r3_weight_0 <= `BSV_ASSIGNMENT_DELAY mac_r3_weight_0$D_IN;
	if (mac_r3_weight_1$EN)
	  mac_r3_weight_1 <= `BSV_ASSIGNMENT_DELAY mac_r3_weight_1$D_IN;
	if (mac_r3_weight_2$EN)
	  mac_r3_weight_2 <= `BSV_ASSIGNMENT_DELAY mac_r3_weight_2$D_IN;
	if (mac_r3_weight_3$EN)
	  mac_r3_weight_3 <= `BSV_ASSIGNMENT_DELAY mac_r3_weight_3$D_IN;
	if (mac_r4_0$EN) mac_r4_0 <= `BSV_ASSIGNMENT_DELAY mac_r4_0$D_IN;
	if (mac_r4_1$EN) mac_r4_1 <= `BSV_ASSIGNMENT_DELAY mac_r4_1$D_IN;
	if (mac_r4_2$EN) mac_r4_2 <= `BSV_ASSIGNMENT_DELAY mac_r4_2$D_IN;
	if (mac_r4_3$EN) mac_r4_3 <= `BSV_ASSIGNMENT_DELAY mac_r4_3$D_IN;
	if (mac_r4_a11$EN)
	  mac_r4_a11 <= `BSV_ASSIGNMENT_DELAY mac_r4_a11$D_IN;
	if (mac_r4_a12$EN)
	  mac_r4_a12 <= `BSV_ASSIGNMENT_DELAY mac_r4_a12$D_IN;
	if (mac_r4_a13$EN)
	  mac_r4_a13 <= `BSV_ASSIGNMENT_DELAY mac_r4_a13$D_IN;
	if (mac_r4_a14$EN)
	  mac_r4_a14 <= `BSV_ASSIGNMENT_DELAY mac_r4_a14$D_IN;
	if (mac_r4_cycle$EN)
	  mac_r4_cycle <= `BSV_ASSIGNMENT_DELAY mac_r4_cycle$D_IN;
	if (mac_r4_n$EN) mac_r4_n <= `BSV_ASSIGNMENT_DELAY mac_r4_n$D_IN;
	if (mac_r4_psum_in11$EN)
	  mac_r4_psum_in11 <= `BSV_ASSIGNMENT_DELAY mac_r4_psum_in11$D_IN;
	if (mac_r4_psum_in12$EN)
	  mac_r4_psum_in12 <= `BSV_ASSIGNMENT_DELAY mac_r4_psum_in12$D_IN;
	if (mac_r4_psum_in13$EN)
	  mac_r4_psum_in13 <= `BSV_ASSIGNMENT_DELAY mac_r4_psum_in13$D_IN;
	if (mac_r4_psum_in14$EN)
	  mac_r4_psum_in14 <= `BSV_ASSIGNMENT_DELAY mac_r4_psum_in14$D_IN;
	if (mac_r4_psum_out_0$EN)
	  mac_r4_psum_out_0 <= `BSV_ASSIGNMENT_DELAY mac_r4_psum_out_0$D_IN;
	if (mac_r4_psum_out_1$EN)
	  mac_r4_psum_out_1 <= `BSV_ASSIGNMENT_DELAY mac_r4_psum_out_1$D_IN;
	if (mac_r4_psum_out_2$EN)
	  mac_r4_psum_out_2 <= `BSV_ASSIGNMENT_DELAY mac_r4_psum_out_2$D_IN;
	if (mac_r4_psum_out_3$EN)
	  mac_r4_psum_out_3 <= `BSV_ASSIGNMENT_DELAY mac_r4_psum_out_3$D_IN;
	if (mac_r4_rg_inputs_rx$EN)
	  mac_r4_rg_inputs_rx <= `BSV_ASSIGNMENT_DELAY
	      mac_r4_rg_inputs_rx$D_IN;
	if (mac_r4_w11$EN)
	  mac_r4_w11 <= `BSV_ASSIGNMENT_DELAY mac_r4_w11$D_IN;
	if (mac_r4_w12$EN)
	  mac_r4_w12 <= `BSV_ASSIGNMENT_DELAY mac_r4_w12$D_IN;
	if (mac_r4_w13$EN)
	  mac_r4_w13 <= `BSV_ASSIGNMENT_DELAY mac_r4_w13$D_IN;
	if (mac_r4_w14$EN)
	  mac_r4_w14 <= `BSV_ASSIGNMENT_DELAY mac_r4_w14$D_IN;
	if (mac_r4_weight_0$EN)
	  mac_r4_weight_0 <= `BSV_ASSIGNMENT_DELAY mac_r4_weight_0$D_IN;
	if (mac_r4_weight_1$EN)
	  mac_r4_weight_1 <= `BSV_ASSIGNMENT_DELAY mac_r4_weight_1$D_IN;
	if (mac_r4_weight_2$EN)
	  mac_r4_weight_2 <= `BSV_ASSIGNMENT_DELAY mac_r4_weight_2$D_IN;
	if (mac_r4_weight_3$EN)
	  mac_r4_weight_3 <= `BSV_ASSIGNMENT_DELAY mac_r4_weight_3$D_IN;
	if (psum_in_0$EN) psum_in_0 <= `BSV_ASSIGNMENT_DELAY psum_in_0$D_IN;
	if (psum_in_1$EN) psum_in_1 <= `BSV_ASSIGNMENT_DELAY psum_in_1$D_IN;
	if (psum_in_2$EN) psum_in_2 <= `BSV_ASSIGNMENT_DELAY psum_in_2$D_IN;
	if (psum_in_3$EN) psum_in_3 <= `BSV_ASSIGNMENT_DELAY psum_in_3$D_IN;
	if (psum_out1_0$EN)
	  psum_out1_0 <= `BSV_ASSIGNMENT_DELAY psum_out1_0$D_IN;
	if (psum_out1_1$EN)
	  psum_out1_1 <= `BSV_ASSIGNMENT_DELAY psum_out1_1$D_IN;
	if (psum_out1_2$EN)
	  psum_out1_2 <= `BSV_ASSIGNMENT_DELAY psum_out1_2$D_IN;
	if (psum_out1_3$EN)
	  psum_out1_3 <= `BSV_ASSIGNMENT_DELAY psum_out1_3$D_IN;
	if (psum_out2_0$EN)
	  psum_out2_0 <= `BSV_ASSIGNMENT_DELAY psum_out2_0$D_IN;
	if (psum_out2_1$EN)
	  psum_out2_1 <= `BSV_ASSIGNMENT_DELAY psum_out2_1$D_IN;
	if (psum_out2_2$EN)
	  psum_out2_2 <= `BSV_ASSIGNMENT_DELAY psum_out2_2$D_IN;
	if (psum_out2_3$EN)
	  psum_out2_3 <= `BSV_ASSIGNMENT_DELAY psum_out2_3$D_IN;
	if (psum_out3_0$EN)
	  psum_out3_0 <= `BSV_ASSIGNMENT_DELAY psum_out3_0$D_IN;
	if (psum_out3_1$EN)
	  psum_out3_1 <= `BSV_ASSIGNMENT_DELAY psum_out3_1$D_IN;
	if (psum_out3_2$EN)
	  psum_out3_2 <= `BSV_ASSIGNMENT_DELAY psum_out3_2$D_IN;
	if (psum_out3_3$EN)
	  psum_out3_3 <= `BSV_ASSIGNMENT_DELAY psum_out3_3$D_IN;
	if (psum_out_0$EN)
	  psum_out_0 <= `BSV_ASSIGNMENT_DELAY psum_out_0$D_IN;
	if (psum_out_1$EN)
	  psum_out_1 <= `BSV_ASSIGNMENT_DELAY psum_out_1$D_IN;
	if (psum_out_2$EN)
	  psum_out_2 <= `BSV_ASSIGNMENT_DELAY psum_out_2$D_IN;
	if (psum_out_3$EN)
	  psum_out_3 <= `BSV_ASSIGNMENT_DELAY psum_out_3$D_IN;
	if (rg_psum_received$EN)
	  rg_psum_received <= `BSV_ASSIGNMENT_DELAY rg_psum_received$D_IN;
	if (weight2_0$EN) weight2_0 <= `BSV_ASSIGNMENT_DELAY weight2_0$D_IN;
	if (weight2_1$EN) weight2_1 <= `BSV_ASSIGNMENT_DELAY weight2_1$D_IN;
	if (weight2_2$EN) weight2_2 <= `BSV_ASSIGNMENT_DELAY weight2_2$D_IN;
	if (weight2_3$EN) weight2_3 <= `BSV_ASSIGNMENT_DELAY weight2_3$D_IN;
	if (weight3_0$EN) weight3_0 <= `BSV_ASSIGNMENT_DELAY weight3_0$D_IN;
	if (weight3_1$EN) weight3_1 <= `BSV_ASSIGNMENT_DELAY weight3_1$D_IN;
	if (weight3_2$EN) weight3_2 <= `BSV_ASSIGNMENT_DELAY weight3_2$D_IN;
	if (weight3_3$EN) weight3_3 <= `BSV_ASSIGNMENT_DELAY weight3_3$D_IN;
	if (weight4_0$EN) weight4_0 <= `BSV_ASSIGNMENT_DELAY weight4_0$D_IN;
	if (weight4_1$EN) weight4_1 <= `BSV_ASSIGNMENT_DELAY weight4_1$D_IN;
	if (weight4_2$EN) weight4_2 <= `BSV_ASSIGNMENT_DELAY weight4_2$D_IN;
	if (weight4_3$EN) weight4_3 <= `BSV_ASSIGNMENT_DELAY weight4_3$D_IN;
	if (weight_0$EN) weight_0 <= `BSV_ASSIGNMENT_DELAY weight_0$D_IN;
	if (weight_1$EN) weight_1 <= `BSV_ASSIGNMENT_DELAY weight_1$D_IN;
	if (weight_2$EN) weight_2 <= `BSV_ASSIGNMENT_DELAY weight_2$D_IN;
	if (weight_3$EN) weight_3 <= `BSV_ASSIGNMENT_DELAY weight_3$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    _unnamed__0 = 32'hAAAAAAAA;
    _unnamed__0_1 = 32'hAAAAAAAA;
    _unnamed__0_2 = 32'hAAAAAAAA;
    _unnamed__0_3 = 32'hAAAAAAAA;
    _unnamed__1 = 32'hAAAAAAAA;
    _unnamed__1_1 = 32'hAAAAAAAA;
    _unnamed__1_2 = 32'hAAAAAAAA;
    _unnamed__1_3 = 32'hAAAAAAAA;
    _unnamed__2 = 32'hAAAAAAAA;
    _unnamed__2_1 = 32'hAAAAAAAA;
    _unnamed__2_2 = 32'hAAAAAAAA;
    _unnamed__2_3 = 32'hAAAAAAAA;
    _unnamed__3 = 32'hAAAAAAAA;
    _unnamed__3_1 = 32'hAAAAAAAA;
    _unnamed__3_2 = 32'hAAAAAAAA;
    _unnamed__3_3 = 32'hAAAAAAAA;
    mac_r1_0 = 32'hAAAAAAAA;
    mac_r1_1 = 32'hAAAAAAAA;
    mac_r1_2 = 32'hAAAAAAAA;
    mac_r1_3 = 32'hAAAAAAAA;
    mac_r1_a11 = 32'hAAAAAAAA;
    mac_r1_a12 = 32'hAAAAAAAA;
    mac_r1_a13 = 32'hAAAAAAAA;
    mac_r1_a14 = 32'hAAAAAAAA;
    mac_r1_cycle = 32'hAAAAAAAA;
    mac_r1_n = 8'hAA;
    mac_r1_psum_in11 = 32'hAAAAAAAA;
    mac_r1_psum_in12 = 32'hAAAAAAAA;
    mac_r1_psum_in13 = 32'hAAAAAAAA;
    mac_r1_psum_in14 = 32'hAAAAAAAA;
    mac_r1_psum_out_0 = 32'hAAAAAAAA;
    mac_r1_psum_out_1 = 32'hAAAAAAAA;
    mac_r1_psum_out_2 = 32'hAAAAAAAA;
    mac_r1_psum_out_3 = 32'hAAAAAAAA;
    mac_r1_rg_inputs_rx = 1'h0;
    mac_r1_w11 = 32'hAAAAAAAA;
    mac_r1_w12 = 32'hAAAAAAAA;
    mac_r1_w13 = 32'hAAAAAAAA;
    mac_r1_w14 = 32'hAAAAAAAA;
    mac_r1_weight_0 = 32'hAAAAAAAA;
    mac_r1_weight_1 = 32'hAAAAAAAA;
    mac_r1_weight_2 = 32'hAAAAAAAA;
    mac_r1_weight_3 = 32'hAAAAAAAA;
    mac_r2_0 = 32'hAAAAAAAA;
    mac_r2_1 = 32'hAAAAAAAA;
    mac_r2_2 = 32'hAAAAAAAA;
    mac_r2_3 = 32'hAAAAAAAA;
    mac_r2_a11 = 32'hAAAAAAAA;
    mac_r2_a12 = 32'hAAAAAAAA;
    mac_r2_a13 = 32'hAAAAAAAA;
    mac_r2_a14 = 32'hAAAAAAAA;
    mac_r2_cycle = 32'hAAAAAAAA;
    mac_r2_n = 8'hAA;
    mac_r2_psum_in11 = 32'hAAAAAAAA;
    mac_r2_psum_in12 = 32'hAAAAAAAA;
    mac_r2_psum_in13 = 32'hAAAAAAAA;
    mac_r2_psum_in14 = 32'hAAAAAAAA;
    mac_r2_psum_out_0 = 32'hAAAAAAAA;
    mac_r2_psum_out_1 = 32'hAAAAAAAA;
    mac_r2_psum_out_2 = 32'hAAAAAAAA;
    mac_r2_psum_out_3 = 32'hAAAAAAAA;
    mac_r2_rg_inputs_rx = 1'h0;
    mac_r2_w11 = 32'hAAAAAAAA;
    mac_r2_w12 = 32'hAAAAAAAA;
    mac_r2_w13 = 32'hAAAAAAAA;
    mac_r2_w14 = 32'hAAAAAAAA;
    mac_r2_weight_0 = 32'hAAAAAAAA;
    mac_r2_weight_1 = 32'hAAAAAAAA;
    mac_r2_weight_2 = 32'hAAAAAAAA;
    mac_r2_weight_3 = 32'hAAAAAAAA;
    mac_r3_0 = 32'hAAAAAAAA;
    mac_r3_1 = 32'hAAAAAAAA;
    mac_r3_2 = 32'hAAAAAAAA;
    mac_r3_3 = 32'hAAAAAAAA;
    mac_r3_a11 = 32'hAAAAAAAA;
    mac_r3_a12 = 32'hAAAAAAAA;
    mac_r3_a13 = 32'hAAAAAAAA;
    mac_r3_a14 = 32'hAAAAAAAA;
    mac_r3_cycle = 32'hAAAAAAAA;
    mac_r3_n = 8'hAA;
    mac_r3_psum_in11 = 32'hAAAAAAAA;
    mac_r3_psum_in12 = 32'hAAAAAAAA;
    mac_r3_psum_in13 = 32'hAAAAAAAA;
    mac_r3_psum_in14 = 32'hAAAAAAAA;
    mac_r3_psum_out_0 = 32'hAAAAAAAA;
    mac_r3_psum_out_1 = 32'hAAAAAAAA;
    mac_r3_psum_out_2 = 32'hAAAAAAAA;
    mac_r3_psum_out_3 = 32'hAAAAAAAA;
    mac_r3_rg_inputs_rx = 1'h0;
    mac_r3_w11 = 32'hAAAAAAAA;
    mac_r3_w12 = 32'hAAAAAAAA;
    mac_r3_w13 = 32'hAAAAAAAA;
    mac_r3_w14 = 32'hAAAAAAAA;
    mac_r3_weight_0 = 32'hAAAAAAAA;
    mac_r3_weight_1 = 32'hAAAAAAAA;
    mac_r3_weight_2 = 32'hAAAAAAAA;
    mac_r3_weight_3 = 32'hAAAAAAAA;
    mac_r4_0 = 32'hAAAAAAAA;
    mac_r4_1 = 32'hAAAAAAAA;
    mac_r4_2 = 32'hAAAAAAAA;
    mac_r4_3 = 32'hAAAAAAAA;
    mac_r4_a11 = 32'hAAAAAAAA;
    mac_r4_a12 = 32'hAAAAAAAA;
    mac_r4_a13 = 32'hAAAAAAAA;
    mac_r4_a14 = 32'hAAAAAAAA;
    mac_r4_cycle = 32'hAAAAAAAA;
    mac_r4_n = 8'hAA;
    mac_r4_psum_in11 = 32'hAAAAAAAA;
    mac_r4_psum_in12 = 32'hAAAAAAAA;
    mac_r4_psum_in13 = 32'hAAAAAAAA;
    mac_r4_psum_in14 = 32'hAAAAAAAA;
    mac_r4_psum_out_0 = 32'hAAAAAAAA;
    mac_r4_psum_out_1 = 32'hAAAAAAAA;
    mac_r4_psum_out_2 = 32'hAAAAAAAA;
    mac_r4_psum_out_3 = 32'hAAAAAAAA;
    mac_r4_rg_inputs_rx = 1'h0;
    mac_r4_w11 = 32'hAAAAAAAA;
    mac_r4_w12 = 32'hAAAAAAAA;
    mac_r4_w13 = 32'hAAAAAAAA;
    mac_r4_w14 = 32'hAAAAAAAA;
    mac_r4_weight_0 = 32'hAAAAAAAA;
    mac_r4_weight_1 = 32'hAAAAAAAA;
    mac_r4_weight_2 = 32'hAAAAAAAA;
    mac_r4_weight_3 = 32'hAAAAAAAA;
    psum_in_0 = 32'hAAAAAAAA;
    psum_in_1 = 32'hAAAAAAAA;
    psum_in_2 = 32'hAAAAAAAA;
    psum_in_3 = 32'hAAAAAAAA;
    psum_out1_0 = 32'hAAAAAAAA;
    psum_out1_1 = 32'hAAAAAAAA;
    psum_out1_2 = 32'hAAAAAAAA;
    psum_out1_3 = 32'hAAAAAAAA;
    psum_out2_0 = 32'hAAAAAAAA;
    psum_out2_1 = 32'hAAAAAAAA;
    psum_out2_2 = 32'hAAAAAAAA;
    psum_out2_3 = 32'hAAAAAAAA;
    psum_out3_0 = 32'hAAAAAAAA;
    psum_out3_1 = 32'hAAAAAAAA;
    psum_out3_2 = 32'hAAAAAAAA;
    psum_out3_3 = 32'hAAAAAAAA;
    psum_out_0 = 32'hAAAAAAAA;
    psum_out_1 = 32'hAAAAAAAA;
    psum_out_2 = 32'hAAAAAAAA;
    psum_out_3 = 32'hAAAAAAAA;
    rg_psum_received = 1'h0;
    weight2_0 = 32'hAAAAAAAA;
    weight2_1 = 32'hAAAAAAAA;
    weight2_2 = 32'hAAAAAAAA;
    weight2_3 = 32'hAAAAAAAA;
    weight3_0 = 32'hAAAAAAAA;
    weight3_1 = 32'hAAAAAAAA;
    weight3_2 = 32'hAAAAAAAA;
    weight3_3 = 32'hAAAAAAAA;
    weight4_0 = 32'hAAAAAAAA;
    weight4_1 = 32'hAAAAAAAA;
    weight4_2 = 32'hAAAAAAAA;
    weight4_3 = 32'hAAAAAAAA;
    weight_0 = 32'hAAAAAAAA;
    weight_1 = 32'hAAAAAAAA;
    weight_2 = 32'hAAAAAAAA;
    weight_3 = 32'hAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      $display("TB4 output %0d   %0d    %0d",
	       psum_out3_0,
	       psum_out3_1,
	       psum_out3_2,
	       psum_out3_3);
    if (RST_N != `BSV_RESET_VALUE)
      if ((mac_r1_cycle ^ 32'h80000000) > 32'h80000011) $finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if ((mac_r2_cycle ^ 32'h80000000) > 32'h80000011) $finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if ((mac_r3_cycle ^ 32'h80000000) > 32'h80000011) $finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if ((mac_r4_cycle ^ 32'h80000000) > 32'h80000011) $finish(32'd0);
  end
  // synopsys translate_on
endmodule  // mkmac_array

